
one_sensor_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003098  08003098  00013098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000260  20000010  20000010  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000270  20000270  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000139cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000236f  00000000  00000000  00033a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007187  00000000  00000000  00035d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000900  00000000  00000000  0003cf00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d40  00000000  00000000  0003d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000054fa  00000000  00000000  0003e540  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cde  00000000  00000000  00043a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00047718  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ca8  00000000  00000000  00047794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003080 	.word	0x08003080

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003080 	.word	0x08003080

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f092 0f00 	teq	r2, #0
 80004be:	bf14      	ite	ne
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e720      	b.n	8000318 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aedc 	beq.w	80002c6 <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6c1      	b.n	80002c6 <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__gedf2>:
 8000968:	f04f 3cff 	mov.w	ip, #4294967295
 800096c:	e006      	b.n	800097c <__cmpdf2+0x4>
 800096e:	bf00      	nop

08000970 <__ledf2>:
 8000970:	f04f 0c01 	mov.w	ip, #1
 8000974:	e002      	b.n	800097c <__cmpdf2+0x4>
 8000976:	bf00      	nop

08000978 <__cmpdf2>:
 8000978:	f04f 0c01 	mov.w	ip, #1
 800097c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	bf18      	it	ne
 800098e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000992:	d01b      	beq.n	80009cc <__cmpdf2+0x54>
 8000994:	b001      	add	sp, #4
 8000996:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099a:	bf0c      	ite	eq
 800099c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a0:	ea91 0f03 	teqne	r1, r3
 80009a4:	bf02      	ittt	eq
 80009a6:	ea90 0f02 	teqeq	r0, r2
 80009aa:	2000      	moveq	r0, #0
 80009ac:	4770      	bxeq	lr
 80009ae:	f110 0f00 	cmn.w	r0, #0
 80009b2:	ea91 0f03 	teq	r1, r3
 80009b6:	bf58      	it	pl
 80009b8:	4299      	cmppl	r1, r3
 80009ba:	bf08      	it	eq
 80009bc:	4290      	cmpeq	r0, r2
 80009be:	bf2c      	ite	cs
 80009c0:	17d8      	asrcs	r0, r3, #31
 80009c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c6:	f040 0001 	orr.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d102      	bne.n	80009dc <__cmpdf2+0x64>
 80009d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009da:	d107      	bne.n	80009ec <__cmpdf2+0x74>
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d1d6      	bne.n	8000994 <__cmpdf2+0x1c>
 80009e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ea:	d0d3      	beq.n	8000994 <__cmpdf2+0x1c>
 80009ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_cdrcmple>:
 80009f4:	4684      	mov	ip, r0
 80009f6:	4610      	mov	r0, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	468c      	mov	ip, r1
 80009fc:	4619      	mov	r1, r3
 80009fe:	4663      	mov	r3, ip
 8000a00:	e000      	b.n	8000a04 <__aeabi_cdcmpeq>
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdcmpeq>:
 8000a04:	b501      	push	{r0, lr}
 8000a06:	f7ff ffb7 	bl	8000978 <__cmpdf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd01      	pop	{r0, pc}

08000a14 <__aeabi_dcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffce 	bl	80009f4 <__aeabi_cdrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc4 	bl	80009f4 <__aeabi_cdrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2iz>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d215      	bcs.n	8000aae <__aeabi_d2iz+0x36>
 8000a82:	d511      	bpl.n	8000aa8 <__aeabi_d2iz+0x30>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d912      	bls.n	8000ab4 <__aeabi_d2iz+0x3c>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	bf18      	it	ne
 8000aa4:	4240      	negne	r0, r0
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab2:	d105      	bne.n	8000ac0 <__aeabi_d2iz+0x48>
 8000ab4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	bf08      	it	eq
 8000aba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_InitTick+0x3c>)
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_InitTick+0x40>)
{
 8000ace:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	7818      	ldrb	r0, [r3, #0]
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ada:	6810      	ldr	r0, [r2, #0]
 8000adc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae0:	f000 f88c 	bl	8000bfc <HAL_SYSTICK_Config>
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	b958      	cbnz	r0, 8000b00 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	2d0f      	cmp	r5, #15
 8000aea:	d809      	bhi.n	8000b00 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	4602      	mov	r2, r0
 8000aee:	4629      	mov	r1, r5
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f842 	bl	8000b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_InitTick+0x44>)
 8000afa:	4620      	mov	r0, r4
 8000afc:	601d      	str	r5, [r3, #0]
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000b02:	bd38      	pop	{r3, r4, r5, pc}
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x20>)
{
 8000b12:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	6813      	ldr	r3, [r2, #0]
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f81b 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffd0 	bl	8000ac8 <HAL_InitTick>
  HAL_MspInit();
 8000b28:	f002 f88e 	bl	8002c48 <HAL_MspInit>
}
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	bd08      	pop	{r3, pc}
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x10>)
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_IncTick+0x14>)
 8000b38:	6811      	ldr	r1, [r2, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000002c 	.word	0x2000002c
 8000b48:	20000000 	.word	0x20000000

08000b4c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_GetTick+0x8>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000002c 	.word	0x2000002c

08000b58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b5a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b60:	041b      	lsls	r3, r3, #16
 8000b62:	0c1b      	lsrs	r3, r3, #16
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b68:	0200      	lsls	r0, r0, #8
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b72:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b74:	60d3      	str	r3, [r2, #12]
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b530      	push	{r4, r5, lr}
 8000b80:	68dc      	ldr	r4, [r3, #12]
 8000b82:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b86:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	bf28      	it	cs
 8000b90:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 0501 	mov.w	r5, #1
 8000b98:	fa05 f303 	lsl.w	r3, r5, r3
 8000b9c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba0:	bf8c      	ite	hi
 8000ba2:	3c03      	subhi	r4, #3
 8000ba4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba6:	4019      	ands	r1, r3
 8000ba8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000baa:	fa05 f404 	lsl.w	r4, r5, r4
 8000bae:	3c01      	subs	r4, #1
 8000bb0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000bb2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	ea42 0201 	orr.w	r2, r2, r1
 8000bb8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	bfaf      	iteee	ge
 8000bbe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	f000 000f 	andlt.w	r0, r0, #15
 8000bc6:	4b06      	ldrlt	r3, [pc, #24]	; (8000be0 <HAL_NVIC_SetPriority+0x64>)
 8000bc8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	bfa5      	ittet	ge
 8000bcc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bd0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bd8:	bd30      	pop	{r4, r5, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	e000ed14 	.word	0xe000ed14

08000be4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000be4:	0942      	lsrs	r2, r0, #5
 8000be6:	2301      	movs	r3, #1
 8000be8:	f000 001f 	and.w	r0, r0, #31
 8000bec:	fa03 f000 	lsl.w	r0, r3, r0
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <HAL_NVIC_EnableIRQ+0x14>)
 8000bf2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	3801      	subs	r0, #1
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d20a      	bcs.n	8000c1a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c08:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	21f0      	movs	r1, #240	; 0xf0
 8000c0c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c2c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c30:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000dc4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c34:	4a61      	ldr	r2, [pc, #388]	; (8000dbc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000c36:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c38:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c3c:	d102      	bne.n	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000c3e:	b003      	add	sp, #12
 8000c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c44:	f04f 0e01 	mov.w	lr, #1
 8000c48:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000c4c:	ea18 060e 	ands.w	r6, r8, lr
 8000c50:	f000 80a6 	beq.w	8000da0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c54:	684c      	ldr	r4, [r1, #4]
 8000c56:	f024 0710 	bic.w	r7, r4, #16
 8000c5a:	2f02      	cmp	r7, #2
 8000c5c:	d116      	bne.n	8000c8c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000c5e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c62:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c66:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c6a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c72:	f04f 0c0f 	mov.w	ip, #15
 8000c76:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c7a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c7e:	690d      	ldr	r5, [r1, #16]
 8000c80:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c84:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c88:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c8c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c90:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c92:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c96:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c9a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000caa:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000cb0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb4:	d811      	bhi.n	8000cda <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000cb6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cbc:	68cf      	ldr	r7, [r1, #12]
 8000cbe:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000cc2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000cc6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cc8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cca:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cce:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cd2:	409f      	lsls	r7, r3
 8000cd4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cd8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cda:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cdc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cde:	688f      	ldr	r7, [r1, #8]
 8000ce0:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ce4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ce6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce8:	00e5      	lsls	r5, r4, #3
 8000cea:	d559      	bpl.n	8000da0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000cf0:	f045 0501 	orr.w	r5, r5, #1
 8000cf4:	f8c9 5018 	str.w	r5, [r9, #24]
 8000cf8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000cfc:	f023 0703 	bic.w	r7, r3, #3
 8000d00:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d04:	f005 0501 	and.w	r5, r5, #1
 8000d08:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d0c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d0e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d14:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d1a:	f04f 0e0f 	mov.w	lr, #15
 8000d1e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d26:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d2a:	d03b      	beq.n	8000da4 <HAL_GPIO_Init+0x17c>
 8000d2c:	4d24      	ldr	r5, [pc, #144]	; (8000dc0 <HAL_GPIO_Init+0x198>)
 8000d2e:	42a8      	cmp	r0, r5
 8000d30:	d03a      	beq.n	8000da8 <HAL_GPIO_Init+0x180>
 8000d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d36:	42a8      	cmp	r0, r5
 8000d38:	d038      	beq.n	8000dac <HAL_GPIO_Init+0x184>
 8000d3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3e:	42a8      	cmp	r0, r5
 8000d40:	d036      	beq.n	8000db0 <HAL_GPIO_Init+0x188>
 8000d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d46:	42a8      	cmp	r0, r5
 8000d48:	d034      	beq.n	8000db4 <HAL_GPIO_Init+0x18c>
 8000d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d032      	beq.n	8000db8 <HAL_GPIO_Init+0x190>
 8000d52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d56:	42a8      	cmp	r0, r5
 8000d58:	bf14      	ite	ne
 8000d5a:	2507      	movne	r5, #7
 8000d5c:	2506      	moveq	r5, #6
 8000d5e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d62:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d66:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000d68:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf0c      	ite	eq
 8000d72:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d74:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d76:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d78:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	bf0c      	ite	eq
 8000d80:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d82:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000d84:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d86:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	bf0c      	ite	eq
 8000d8e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d90:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000d92:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d94:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d96:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d98:	bf54      	ite	pl
 8000d9a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000d9c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000d9e:	60d5      	str	r5, [r2, #12]
    position++;
 8000da0:	3301      	adds	r3, #1
 8000da2:	e749      	b.n	8000c38 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da4:	2500      	movs	r5, #0
 8000da6:	e7da      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000da8:	2501      	movs	r5, #1
 8000daa:	e7d8      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000dac:	2502      	movs	r5, #2
 8000dae:	e7d6      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000db0:	2503      	movs	r5, #3
 8000db2:	e7d4      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000db4:	2504      	movs	r5, #4
 8000db6:	e7d2      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000db8:	2505      	movs	r5, #5
 8000dba:	e7d0      	b.n	8000d5e <HAL_GPIO_Init+0x136>
 8000dbc:	40010400 	.word	0x40010400
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dc8:	6903      	ldr	r3, [r0, #16]
 8000dca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000dcc:	bf14      	ite	ne
 8000dce:	2001      	movne	r0, #1
 8000dd0:	2000      	moveq	r0, #0
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd4:	b10a      	cbz	r2, 8000dda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd6:	6181      	str	r1, [r0, #24]
 8000dd8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dda:	6281      	str	r1, [r0, #40]	; 0x28
 8000ddc:	4770      	bx	lr
	...

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	4605      	mov	r5, r0
 8000de6:	b918      	cbnz	r0, 8000df0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000dea:	b002      	add	sp, #8
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df0:	6803      	ldr	r3, [r0, #0]
 8000df2:	07df      	lsls	r7, r3, #31
 8000df4:	d411      	bmi.n	8000e1a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	682b      	ldr	r3, [r5, #0]
 8000df8:	079e      	lsls	r6, r3, #30
 8000dfa:	f100 8088 	bmi.w	8000f0e <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	071c      	lsls	r4, r3, #28
 8000e02:	f100 80fc 	bmi.w	8000ffe <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	0758      	lsls	r0, r3, #29
 8000e0a:	f100 8145 	bmi.w	8001098 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e0e:	69aa      	ldr	r2, [r5, #24]
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f040 81dc 	bne.w	80011ce <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000e16:	2000      	movs	r0, #0
 8000e18:	e7e7      	b.n	8000dea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1a:	4cbd      	ldr	r4, [pc, #756]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d00a      	beq.n	8000e3c <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e26:	6863      	ldr	r3, [r4, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d119      	bne.n	8000e64 <HAL_RCC_OscConfig+0x84>
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3a:	d113      	bne.n	8000e64 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e40:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	6821      	ldr	r1, [r4, #0]
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	2201      	movs	r2, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	420b      	tst	r3, r1
 8000e5a:	d0cc      	beq.n	8000df6 <HAL_RCC_OscConfig+0x16>
 8000e5c:	686b      	ldr	r3, [r5, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1c9      	bne.n	8000df6 <HAL_RCC_OscConfig+0x16>
 8000e62:	e7c1      	b.n	8000de8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e64:	686b      	ldr	r3, [r5, #4]
 8000e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6a:	d11e      	bne.n	8000eaa <HAL_RCC_OscConfig+0xca>
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e74:	f7ff fe6a 	bl	8000b4c <HAL_GetTick>
 8000e78:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e7c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	2701      	movs	r7, #1
 8000e80:	fa96 f3a6 	rbit	r3, r6
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	fa96 f3a6 	rbit	r3, r6
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	fa07 f303 	lsl.w	r3, r7, r3
 8000e96:	4213      	tst	r3, r2
 8000e98:	d1ad      	bne.n	8000df6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9a:	f7ff fe57 	bl	8000b4c <HAL_GetTick>
 8000e9e:	eba0 0008 	sub.w	r0, r0, r8
 8000ea2:	2864      	cmp	r0, #100	; 0x64
 8000ea4:	d9ec      	bls.n	8000e80 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	e79f      	b.n	8000dea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	bb0b      	cbnz	r3, 8000ef0 <HAL_RCC_OscConfig+0x110>
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb2:	6023      	str	r3, [r4, #0]
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fe46 	bl	8000b4c <HAL_GetTick>
 8000ec0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ec4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	2701      	movs	r7, #1
 8000ec8:	fa96 f3a6 	rbit	r3, r6
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	fa96 f3a6 	rbit	r3, r6
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	fa07 f303 	lsl.w	r3, r7, r3
 8000ede:	4213      	tst	r3, r2
 8000ee0:	d089      	beq.n	8000df6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fe33 	bl	8000b4c <HAL_GetTick>
 8000ee6:	eba0 0008 	sub.w	r0, r0, r8
 8000eea:	2864      	cmp	r0, #100	; 0x64
 8000eec:	d9ec      	bls.n	8000ec8 <HAL_RCC_OscConfig+0xe8>
 8000eee:	e7da      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	d103      	bne.n	8000f00 <HAL_RCC_OscConfig+0x120>
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	e7b5      	b.n	8000e6c <HAL_RCC_OscConfig+0x8c>
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	e7b1      	b.n	8000e72 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f0e:	4c80      	ldr	r4, [pc, #512]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	f013 0f0c 	tst.w	r3, #12
 8000f16:	d00a      	beq.n	8000f2e <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f18:	6863      	ldr	r3, [r4, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d125      	bne.n	8000f6e <HAL_RCC_OscConfig+0x18e>
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f2c:	d11f      	bne.n	8000f6e <HAL_RCC_OscConfig+0x18e>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f34:	6821      	ldr	r1, [r4, #0]
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	2201      	movs	r2, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	420b      	tst	r3, r1
 8000f4a:	d003      	beq.n	8000f54 <HAL_RCC_OscConfig+0x174>
 8000f4c:	68eb      	ldr	r3, [r5, #12]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f47f af4a 	bne.w	8000de8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	6821      	ldr	r1, [r4, #0]
 8000f56:	23f8      	movs	r3, #248	; 0xf8
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	fab3 f283 	clz	r2, r3
 8000f60:	692b      	ldr	r3, [r5, #16]
 8000f62:	4093      	lsls	r3, r2
 8000f64:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	e747      	b.n	8000dfe <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6e:	68ea      	ldr	r2, [r5, #12]
 8000f70:	2601      	movs	r6, #1
 8000f72:	b30a      	cbz	r2, 8000fb8 <HAL_RCC_OscConfig+0x1d8>
 8000f74:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	2702      	movs	r7, #2
 8000f88:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fddf 	bl	8000b4c <HAL_GetTick>
 8000f8e:	4680      	mov	r8, r0
 8000f90:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	fa97 f3a7 	rbit	r3, r7
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	fa06 f303 	lsl.w	r3, r6, r3
 8000fa6:	4213      	tst	r3, r2
 8000fa8:	d1d4      	bne.n	8000f54 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fdcf 	bl	8000b4c <HAL_GetTick>
 8000fae:	eba0 0008 	sub.w	r0, r0, r8
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9ec      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b0>
 8000fb6:	e776      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
 8000fb8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	2702      	movs	r7, #2
 8000fcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fce:	f7ff fdbd 	bl	8000b4c <HAL_GetTick>
 8000fd2:	4680      	mov	r8, r0
 8000fd4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd8:	6822      	ldr	r2, [r4, #0]
 8000fda:	fa97 f3a7 	rbit	r3, r7
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	fa06 f303 	lsl.w	r3, r6, r3
 8000fea:	4213      	tst	r3, r2
 8000fec:	f43f af07 	beq.w	8000dfe <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fdac 	bl	8000b4c <HAL_GetTick>
 8000ff4:	eba0 0008 	sub.w	r0, r0, r8
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9eb      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x1f4>
 8000ffc:	e753      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffe:	696a      	ldr	r2, [r5, #20]
 8001000:	4e43      	ldr	r6, [pc, #268]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 8001002:	4944      	ldr	r1, [pc, #272]	; (8001114 <HAL_RCC_OscConfig+0x334>)
 8001004:	2401      	movs	r4, #1
 8001006:	b31a      	cbz	r2, 8001050 <HAL_RCC_OscConfig+0x270>
 8001008:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	440b      	add	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	2702      	movs	r7, #2
 8001016:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001018:	f7ff fd98 	bl	8000b4c <HAL_GetTick>
 800101c:	4680      	mov	r8, r0
 800101e:	fa97 f3a7 	rbit	r3, r7
 8001022:	fa97 f3a7 	rbit	r3, r7
 8001026:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800102c:	fa97 f3a7 	rbit	r3, r7
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	fa04 f303 	lsl.w	r3, r4, r3
 800103c:	4213      	tst	r3, r2
 800103e:	f47f aee2 	bne.w	8000e06 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001042:	f7ff fd83 	bl	8000b4c <HAL_GetTick>
 8001046:	eba0 0008 	sub.w	r0, r0, r8
 800104a:	2802      	cmp	r0, #2
 800104c:	d9e7      	bls.n	800101e <HAL_RCC_OscConfig+0x23e>
 800104e:	e72a      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
 8001050:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	440b      	add	r3, r1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	2702      	movs	r7, #2
 800105e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001060:	f7ff fd74 	bl	8000b4c <HAL_GetTick>
 8001064:	4680      	mov	r8, r0
 8001066:	fa97 f3a7 	rbit	r3, r7
 800106a:	fa97 f3a7 	rbit	r3, r7
 800106e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001072:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001074:	fa97 f3a7 	rbit	r3, r7
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa04 f303 	lsl.w	r3, r4, r3
 8001084:	4213      	tst	r3, r2
 8001086:	f43f aebe 	beq.w	8000e06 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff fd5f 	bl	8000b4c <HAL_GetTick>
 800108e:	eba0 0008 	sub.w	r0, r0, r8
 8001092:	2802      	cmp	r0, #2
 8001094:	d9e7      	bls.n	8001066 <HAL_RCC_OscConfig+0x286>
 8001096:	e706      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001098:	4c1d      	ldr	r4, [pc, #116]	; (8001110 <HAL_RCC_OscConfig+0x330>)
 800109a:	69e3      	ldr	r3, [r4, #28]
 800109c:	00d9      	lsls	r1, r3, #3
 800109e:	d434      	bmi.n	800110a <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	69e3      	ldr	r3, [r4, #28]
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	61e3      	str	r3, [r4, #28]
 80010a8:	69e3      	ldr	r3, [r4, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	4f18      	ldr	r7, [pc, #96]	; (8001118 <HAL_RCC_OscConfig+0x338>)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	05da      	lsls	r2, r3, #23
 80010ba:	d52f      	bpl.n	800111c <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	68ab      	ldr	r3, [r5, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d13d      	bne.n	800113e <HAL_RCC_OscConfig+0x35e>
 80010c2:	6a23      	ldr	r3, [r4, #32]
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010ca:	f7ff fd3f 	bl	8000b4c <HAL_GetTick>
 80010ce:	2702      	movs	r7, #2
 80010d0:	4682      	mov	sl, r0
 80010d2:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	f04f 0801 	mov.w	r8, #1
 80010d8:	fa97 f3a7 	rbit	r3, r7
 80010dc:	fa97 f3a7 	rbit	r3, r7
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d06c      	beq.n	80011be <HAL_RCC_OscConfig+0x3de>
 80010e4:	6a22      	ldr	r2, [r4, #32]
 80010e6:	fa99 f3a9 	rbit	r3, r9
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa08 f303 	lsl.w	r3, r8, r3
 80010f6:	4213      	tst	r3, r2
 80010f8:	d058      	beq.n	80011ac <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	f43f ae87 	beq.w	8000e0e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001100:	69e3      	ldr	r3, [r4, #28]
 8001102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001106:	61e3      	str	r3, [r4, #28]
 8001108:	e681      	b.n	8000e0e <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2600      	movs	r6, #0
 800110c:	e7d2      	b.n	80010b4 <HAL_RCC_OscConfig+0x2d4>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	10908120 	.word	0x10908120
 8001118:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001124:	f7ff fd12 	bl	8000b4c <HAL_GetTick>
 8001128:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	d4c5      	bmi.n	80010bc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff fd0c 	bl	8000b4c <HAL_GetTick>
 8001134:	eba0 0008 	sub.w	r0, r0, r8
 8001138:	2864      	cmp	r0, #100	; 0x64
 800113a:	d9f6      	bls.n	800112a <HAL_RCC_OscConfig+0x34a>
 800113c:	e6b3      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113e:	bb3b      	cbnz	r3, 8001190 <HAL_RCC_OscConfig+0x3b0>
 8001140:	6a23      	ldr	r3, [r4, #32]
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	6223      	str	r3, [r4, #32]
 8001148:	6a23      	ldr	r3, [r4, #32]
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001150:	f7ff fcfc 	bl	8000b4c <HAL_GetTick>
 8001154:	2702      	movs	r7, #2
 8001156:	4682      	mov	sl, r0
 8001158:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115a:	f04f 0801 	mov.w	r8, #1
 800115e:	fa97 f3a7 	rbit	r3, r7
 8001162:	fa97 f3a7 	rbit	r3, r7
 8001166:	b373      	cbz	r3, 80011c6 <HAL_RCC_OscConfig+0x3e6>
 8001168:	6a22      	ldr	r2, [r4, #32]
 800116a:	fa99 f3a9 	rbit	r3, r9
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	fa08 f303 	lsl.w	r3, r8, r3
 800117a:	4213      	tst	r3, r2
 800117c:	d0bd      	beq.n	80010fa <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fce5 	bl	8000b4c <HAL_GetTick>
 8001182:	f241 3388 	movw	r3, #5000	; 0x1388
 8001186:	eba0 000a 	sub.w	r0, r0, sl
 800118a:	4298      	cmp	r0, r3
 800118c:	d9e7      	bls.n	800115e <HAL_RCC_OscConfig+0x37e>
 800118e:	e68a      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	2b05      	cmp	r3, #5
 8001192:	6a23      	ldr	r3, [r4, #32]
 8001194:	d103      	bne.n	800119e <HAL_RCC_OscConfig+0x3be>
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6223      	str	r3, [r4, #32]
 800119c:	e791      	b.n	80010c2 <HAL_RCC_OscConfig+0x2e2>
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6223      	str	r3, [r4, #32]
 80011a4:	6a23      	ldr	r3, [r4, #32]
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	e78d      	b.n	80010c8 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fcce 	bl	8000b4c <HAL_GetTick>
 80011b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b4:	eba0 000a 	sub.w	r0, r0, sl
 80011b8:	4298      	cmp	r0, r3
 80011ba:	d98d      	bls.n	80010d8 <HAL_RCC_OscConfig+0x2f8>
 80011bc:	e673      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
 80011be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011c4:	e78f      	b.n	80010e6 <HAL_RCC_OscConfig+0x306>
 80011c6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011cc:	e7cd      	b.n	800116a <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ce:	4c44      	ldr	r4, [pc, #272]	; (80012e0 <HAL_RCC_OscConfig+0x500>)
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	f43f ae06 	beq.w	8000de8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011dc:	2a02      	cmp	r2, #2
 80011de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e2:	d158      	bne.n	8001296 <HAL_RCC_OscConfig+0x4b6>
 80011e4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011fa:	f7ff fca7 	bl	8000b4c <HAL_GetTick>
 80011fe:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001202:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	2601      	movs	r6, #1
 8001206:	fa97 f3a7 	rbit	r3, r7
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	fa97 f3a7 	rbit	r3, r7
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa06 f303 	lsl.w	r3, r6, r3
 800121c:	4213      	tst	r3, r2
 800121e:	d133      	bne.n	8001288 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001222:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001224:	f023 030f 	bic.w	r3, r3, #15
 8001228:	4313      	orrs	r3, r2
 800122a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800122c:	6862      	ldr	r2, [r4, #4]
 800122e:	6a2b      	ldr	r3, [r5, #32]
 8001230:	69e9      	ldr	r1, [r5, #28]
 8001232:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001236:	430b      	orrs	r3, r1
 8001238:	4313      	orrs	r3, r2
 800123a:	6063      	str	r3, [r4, #4]
 800123c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001240:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800124c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001256:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001258:	f7ff fc78 	bl	8000b4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800125e:	4607      	mov	r7, r0
 8001260:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	fa95 f3a5 	rbit	r3, r5
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	fa06 f303 	lsl.w	r3, r6, r3
 8001276:	4213      	tst	r3, r2
 8001278:	f47f adcd 	bne.w	8000e16 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fc66 	bl	8000b4c <HAL_GetTick>
 8001280:	1bc0      	subs	r0, r0, r7
 8001282:	2802      	cmp	r0, #2
 8001284:	d9ec      	bls.n	8001260 <HAL_RCC_OscConfig+0x480>
 8001286:	e60e      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fc60 	bl	8000b4c <HAL_GetTick>
 800128c:	eba0 0008 	sub.w	r0, r0, r8
 8001290:	2802      	cmp	r0, #2
 8001292:	d9b8      	bls.n	8001206 <HAL_RCC_OscConfig+0x426>
 8001294:	e607      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
 8001296:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc4e 	bl	8000b4c <HAL_GetTick>
 80012b0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80012b4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	2601      	movs	r6, #1
 80012b8:	fa95 f3a5 	rbit	r3, r5
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	fa95 f3a5 	rbit	r3, r5
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	fa06 f303 	lsl.w	r3, r6, r3
 80012ce:	4213      	tst	r3, r2
 80012d0:	f43f ada1 	beq.w	8000e16 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fc3a 	bl	8000b4c <HAL_GetTick>
 80012d8:	1bc0      	subs	r0, r0, r7
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9ec      	bls.n	80012b8 <HAL_RCC_OscConfig+0x4d8>
 80012de:	e5e2      	b.n	8000ea6 <HAL_RCC_OscConfig+0xc6>
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80012e4:	4911      	ldr	r1, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0x48>)
 80012e6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e8:	f003 020c 	and.w	r2, r3, #12
 80012ec:	2a08      	cmp	r2, #8
 80012ee:	d11a      	bne.n	8001326 <HAL_RCC_GetSysClockFreq+0x42>
 80012f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012fa:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001300:	fa90 f0a0 	rbit	r0, r0
 8001304:	fab0 f080 	clz	r0, r0
 8001308:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800130c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001310:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001312:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <HAL_RCC_GetSysClockFreq+0x50>)
 8001318:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <HAL_RCC_GetSysClockFreq+0x54>)
 800131c:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001320:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001322:	4348      	muls	r0, r1
 8001324:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	08003098 	.word	0x08003098
 8001334:	080030a8 	.word	0x080030a8
 8001338:	007a1200 	.word	0x007a1200

0800133c <HAL_RCC_ClockConfig>:
{
 800133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001340:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001342:	4604      	mov	r4, r0
 8001344:	b910      	cbnz	r0, 800134c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001346:	2001      	movs	r0, #1
 8001348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_RCC_ClockConfig+0x144>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	428b      	cmp	r3, r1
 8001356:	d32e      	bcc.n	80013b6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	0791      	lsls	r1, r2, #30
 800135c:	d436      	bmi.n	80013cc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	07d2      	lsls	r2, r2, #31
 8001360:	d43c      	bmi.n	80013dc <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001362:	4a47      	ldr	r2, [pc, #284]	; (8001480 <HAL_RCC_ClockConfig+0x144>)
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	429d      	cmp	r5, r3
 800136c:	d375      	bcc.n	800145a <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136e:	6822      	ldr	r2, [r4, #0]
 8001370:	4d44      	ldr	r5, [pc, #272]	; (8001484 <HAL_RCC_ClockConfig+0x148>)
 8001372:	f012 0f04 	tst.w	r2, #4
 8001376:	d17c      	bne.n	8001472 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	0713      	lsls	r3, r2, #28
 800137a:	d506      	bpl.n	800138a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137c:	686b      	ldr	r3, [r5, #4]
 800137e:	6922      	ldr	r2, [r4, #16]
 8001380:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001384:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001388:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800138a:	f7ff ffab 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 800138e:	686b      	ldr	r3, [r5, #4]
 8001390:	22f0      	movs	r2, #240	; 0xf0
 8001392:	fa92 f2a2 	rbit	r2, r2
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139e:	40d3      	lsrs	r3, r2
 80013a0:	4a39      	ldr	r2, [pc, #228]	; (8001488 <HAL_RCC_ClockConfig+0x14c>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	40d8      	lsrs	r0, r3
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 80013a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fb8c 	bl	8000ac8 <HAL_InitTick>
  return HAL_OK;
 80013b0:	2000      	movs	r0, #0
 80013b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	430b      	orrs	r3, r1
 80013be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	4299      	cmp	r1, r3
 80013c8:	d1bd      	bne.n	8001346 <HAL_RCC_ClockConfig+0xa>
 80013ca:	e7c5      	b.n	8001358 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013cc:	492d      	ldr	r1, [pc, #180]	; (8001484 <HAL_RCC_ClockConfig+0x148>)
 80013ce:	68a0      	ldr	r0, [r4, #8]
 80013d0:	684b      	ldr	r3, [r1, #4]
 80013d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d6:	4303      	orrs	r3, r0
 80013d8:	604b      	str	r3, [r1, #4]
 80013da:	e7c0      	b.n	800135e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013dc:	6862      	ldr	r2, [r4, #4]
 80013de:	4e29      	ldr	r6, [pc, #164]	; (8001484 <HAL_RCC_ClockConfig+0x148>)
 80013e0:	2a01      	cmp	r2, #1
 80013e2:	d127      	bne.n	8001434 <HAL_RCC_ClockConfig+0xf8>
 80013e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	6831      	ldr	r1, [r6, #0]
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	d0a1      	beq.n	8001346 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001402:	6873      	ldr	r3, [r6, #4]
 8001404:	f023 0303 	bic.w	r3, r3, #3
 8001408:	431a      	orrs	r2, r3
 800140a:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800140c:	f7ff fb9e 	bl	8000b4c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001414:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	6873      	ldr	r3, [r6, #4]
 8001418:	6862      	ldr	r2, [r4, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001422:	d09e      	beq.n	8001362 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fb92 	bl	8000b4c <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	4540      	cmp	r0, r8
 800142c:	d9f3      	bls.n	8001416 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800142e:	2003      	movs	r0, #3
}
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001434:	2a02      	cmp	r2, #2
 8001436:	bf0c      	ite	eq
 8001438:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800143c:	2302      	movne	r3, #2
 800143e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	6830      	ldr	r0, [r6, #0]
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	fab3 f383 	clz	r3, r3
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2101      	movs	r1, #1
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	4203      	tst	r3, r0
 8001458:	e7d2      	b.n	8001400 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	f023 0307 	bic.w	r3, r3, #7
 8001460:	432b      	orrs	r3, r5
 8001462:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	429d      	cmp	r5, r3
 800146c:	f47f af6b 	bne.w	8001346 <HAL_RCC_ClockConfig+0xa>
 8001470:	e77d      	b.n	800136e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001472:	686b      	ldr	r3, [r5, #4]
 8001474:	68e1      	ldr	r1, [r4, #12]
 8001476:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800147a:	430b      	orrs	r3, r1
 800147c:	606b      	str	r3, [r5, #4]
 800147e:	e77b      	b.n	8001378 <HAL_RCC_ClockConfig+0x3c>
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	080030bc 	.word	0x080030bc
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	fa92 f2a2 	rbit	r2, r2
 800149c:	fab2 f282 	clz	r2, r2
 80014a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014a4:	40d3      	lsrs	r3, r2
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80014ac:	6810      	ldr	r0, [r2, #0]
}    
 80014ae:	40d8      	lsrs	r0, r3
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	080030cc 	.word	0x080030cc
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	fa92 f2a2 	rbit	r2, r2
 80014cc:	fab2 f282 	clz	r2, r2
 80014d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014d4:	40d3      	lsrs	r3, r2
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_RCC_GetPCLK2Freq+0x2c>)
 80014dc:	6810      	ldr	r0, [r2, #0]
} 
 80014de:	40d8      	lsrs	r0, r3
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	080030cc 	.word	0x080030cc
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014f0:	6803      	ldr	r3, [r0, #0]
{
 80014f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014f6:	03df      	lsls	r7, r3, #15
{
 80014f8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014fa:	d523      	bpl.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fc:	4d9b      	ldr	r5, [pc, #620]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014fe:	69eb      	ldr	r3, [r5, #28]
 8001500:	00de      	lsls	r6, r3, #3
 8001502:	f100 80d7 	bmi.w	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	69eb      	ldr	r3, [r5, #28]
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61eb      	str	r3, [r5, #28]
 800150e:	69eb      	ldr	r3, [r5, #28]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001518:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4f95      	ldr	r7, [pc, #596]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	05d8      	lsls	r0, r3, #23
 8001520:	f140 80ca 	bpl.w	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001524:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001526:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800152a:	f040 80da 	bne.w	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800152e:	6a2b      	ldr	r3, [r5, #32]
 8001530:	6862      	ldr	r2, [r4, #4]
 8001532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001536:	4313      	orrs	r3, r2
 8001538:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800153a:	b11e      	cbz	r6, 8001544 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153c:	69eb      	ldr	r3, [r5, #28]
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001542:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	07c3      	lsls	r3, r0, #31
 8001548:	d506      	bpl.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800154a:	4a88      	ldr	r2, [pc, #544]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800154c:	68a1      	ldr	r1, [r4, #8]
 800154e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001550:	f023 0303 	bic.w	r3, r3, #3
 8001554:	430b      	orrs	r3, r1
 8001556:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001558:	0787      	lsls	r7, r0, #30
 800155a:	d506      	bpl.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800155c:	4a83      	ldr	r2, [pc, #524]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800155e:	68e1      	ldr	r1, [r4, #12]
 8001560:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001562:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001566:	430b      	orrs	r3, r1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800156a:	0746      	lsls	r6, r0, #29
 800156c:	d506      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800156e:	4a7f      	ldr	r2, [pc, #508]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001570:	6921      	ldr	r1, [r4, #16]
 8001572:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001574:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001578:	430b      	orrs	r3, r1
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800157c:	0685      	lsls	r5, r0, #26
 800157e:	d506      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001580:	4a7a      	ldr	r2, [pc, #488]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001582:	69e1      	ldr	r1, [r4, #28]
 8001584:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001586:	f023 0310 	bic.w	r3, r3, #16
 800158a:	430b      	orrs	r3, r1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800158e:	0381      	lsls	r1, r0, #14
 8001590:	d506      	bpl.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001592:	4a76      	ldr	r2, [pc, #472]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001594:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800159c:	430b      	orrs	r3, r1
 800159e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015a0:	0642      	lsls	r2, r0, #25
 80015a2:	d506      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015a4:	4a71      	ldr	r2, [pc, #452]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015a6:	6a21      	ldr	r1, [r4, #32]
 80015a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015aa:	f023 0320 	bic.w	r3, r3, #32
 80015ae:	430b      	orrs	r3, r1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015b2:	0343      	lsls	r3, r0, #13
 80015b4:	d506      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015c4:	0707      	lsls	r7, r0, #28
 80015c6:	d506      	bpl.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015ca:	6961      	ldr	r1, [r4, #20]
 80015cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015d6:	06c6      	lsls	r6, r0, #27
 80015d8:	d506      	bpl.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015da:	4a64      	ldr	r2, [pc, #400]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015dc:	69a1      	ldr	r1, [r4, #24]
 80015de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80015e8:	0585      	lsls	r5, r0, #22
 80015ea:	d506      	bpl.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015ec:	4a5f      	ldr	r2, [pc, #380]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80015f0:	6853      	ldr	r3, [r2, #4]
 80015f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015fa:	0601      	lsls	r1, r0, #24
 80015fc:	d506      	bpl.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001602:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001604:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001608:	430b      	orrs	r3, r1
 800160a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800160c:	05c2      	lsls	r2, r0, #23
 800160e:	d506      	bpl.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001610:	4a56      	ldr	r2, [pc, #344]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001612:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001616:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800161a:	430b      	orrs	r3, r1
 800161c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800161e:	04c3      	lsls	r3, r0, #19
 8001620:	d506      	bpl.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001622:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001626:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800162c:	430b      	orrs	r3, r1
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001630:	0487      	lsls	r7, r0, #18
 8001632:	d506      	bpl.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001634:	4a4d      	ldr	r2, [pc, #308]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001636:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001638:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800163a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800163e:	430b      	orrs	r3, r1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001642:	02c6      	lsls	r6, r0, #11
 8001644:	d506      	bpl.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001646:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001648:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800164a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800164c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001650:	430b      	orrs	r3, r1
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001654:	0285      	lsls	r5, r0, #10
 8001656:	d506      	bpl.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001658:	4a44      	ldr	r2, [pc, #272]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800165a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800165c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800165e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001662:	430b      	orrs	r3, r1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001666:	0241      	lsls	r1, r0, #9
 8001668:	d506      	bpl.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800166a:	4a40      	ldr	r2, [pc, #256]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800166c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800166e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001674:	430b      	orrs	r3, r1
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001678:	0202      	lsls	r2, r0, #8
 800167a:	d506      	bpl.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800167c:	4a3b      	ldr	r2, [pc, #236]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800167e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001680:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	430b      	orrs	r3, r1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800168a:	01c3      	lsls	r3, r0, #7
 800168c:	d506      	bpl.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001690:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001692:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001698:	430b      	orrs	r3, r1
 800169a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800169c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80016a0:	d01c      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80016a2:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80016a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80016b0:	2000      	movs	r0, #0
 80016b2:	e013      	b.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2600      	movs	r6, #0
 80016b6:	e730      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa44 	bl	8000b4c <HAL_GetTick>
 80016c4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	05d9      	lsls	r1, r3, #23
 80016ca:	f53f af2b 	bmi.w	8001524 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fa3d 	bl	8000b4c <HAL_GetTick>
 80016d2:	eba0 0008 	sub.w	r0, r0, r8
 80016d6:	2864      	cmp	r0, #100	; 0x64
 80016d8:	d9f5      	bls.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80016da:	2003      	movs	r0, #3
}
 80016dc:	b002      	add	sp, #8
 80016de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016e2:	6862      	ldr	r2, [r4, #4]
 80016e4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f43f af20 	beq.w	800152e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016ee:	6a29      	ldr	r1, [r5, #32]
 80016f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80016f8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001774 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001700:	fab2 f282 	clz	r2, r2
 8001704:	4472      	add	r2, lr
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	2701      	movs	r7, #1
 800170a:	6017      	str	r7, [r2, #0]
 800170c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	4473      	add	r3, lr
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800171c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800171e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001720:	f57f af05 	bpl.w	800152e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001724:	f7ff fa12 	bl	8000b4c <HAL_GetTick>
 8001728:	f04f 0802 	mov.w	r8, #2
 800172c:	4682      	mov	sl, r0
 800172e:	46c1      	mov	r9, r8
 8001730:	fa98 f3a8 	rbit	r3, r8
 8001734:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	b1a3      	cbz	r3, 8001764 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800173a:	6a2a      	ldr	r2, [r5, #32]
 800173c:	fa99 f3a9 	rbit	r3, r9
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa07 f303 	lsl.w	r3, r7, r3
 800174c:	4213      	tst	r3, r2
 800174e:	f47f aeee 	bne.w	800152e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff f9fb 	bl	8000b4c <HAL_GetTick>
 8001756:	f241 3388 	movw	r3, #5000	; 0x1388
 800175a:	eba0 000a 	sub.w	r0, r0, sl
 800175e:	4298      	cmp	r0, r3
 8001760:	d9e6      	bls.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001762:	e7ba      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001764:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800176a:	e7e7      	b.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	10908100 	.word	0x10908100

08001778 <HAL_TIM_PeriodElapsedCallback>:
 8001778:	4770      	bx	lr

0800177a <HAL_TIM_OC_DelayElapsedCallback>:
 800177a:	4770      	bx	lr

0800177c <HAL_TIM_PWM_PulseFinishedCallback>:
 800177c:	4770      	bx	lr

0800177e <HAL_TIM_TriggerCallback>:
 800177e:	4770      	bx	lr

08001780 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001780:	6803      	ldr	r3, [r0, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	0791      	lsls	r1, r2, #30
{
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800178a:	d50f      	bpl.n	80017ac <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	0792      	lsls	r2, r2, #30
 8001790:	d50c      	bpl.n	80017ac <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001792:	f06f 0202 	mvn.w	r2, #2
 8001796:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001798:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800179a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800179c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800179e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017a0:	f000 8085 	beq.w	80018ae <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80017a4:	f000 fede 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a8:	2300      	movs	r3, #0
 80017aa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	0752      	lsls	r2, r2, #29
 80017b2:	d510      	bpl.n	80017d6 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	0750      	lsls	r0, r2, #29
 80017b8:	d50d      	bpl.n	80017d6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017ba:	f06f 0204 	mvn.w	r2, #4
 80017be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c8:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017ca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017cc:	d075      	beq.n	80018ba <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	f000 fec9 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d2:	2300      	movs	r3, #0
 80017d4:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	0711      	lsls	r1, r2, #28
 80017dc:	d50f      	bpl.n	80017fe <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	0712      	lsls	r2, r2, #28
 80017e2:	d50c      	bpl.n	80017fe <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017e4:	f06f 0208 	mvn.w	r2, #8
 80017e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ec:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ee:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f0:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017f2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f4:	d067      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	f000 feb5 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	2300      	movs	r3, #0
 80017fc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	06d0      	lsls	r0, r2, #27
 8001804:	d510      	bpl.n	8001828 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	06d1      	lsls	r1, r2, #27
 800180a:	d50d      	bpl.n	8001828 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800180c:	f06f 0210 	mvn.w	r2, #16
 8001810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001812:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001814:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001816:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800181a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800181c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800181e:	d058      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001820:	f000 fea0 	bl	8002564 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001824:	2300      	movs	r3, #0
 8001826:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	07d2      	lsls	r2, r2, #31
 800182e:	d508      	bpl.n	8001842 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	07d0      	lsls	r0, r2, #31
 8001834:	d505      	bpl.n	8001842 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001836:	f06f 0201 	mvn.w	r2, #1
 800183a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff ff9b 	bl	8001778 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	0611      	lsls	r1, r2, #24
 8001848:	d508      	bpl.n	800185c <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	0612      	lsls	r2, r2, #24
 800184e:	d505      	bpl.n	800185c <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001856:	4620      	mov	r0, r4
 8001858:	f000 fc8f 	bl	800217a <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	05d0      	lsls	r0, r2, #23
 8001862:	d508      	bpl.n	8001876 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	0611      	lsls	r1, r2, #24
 8001868:	d505      	bpl.n	8001876 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800186a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800186e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001870:	4620      	mov	r0, r4
 8001872:	f000 fc83 	bl	800217c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	0652      	lsls	r2, r2, #25
 800187c:	d508      	bpl.n	8001890 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	0650      	lsls	r0, r2, #25
 8001882:	d505      	bpl.n	8001890 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001888:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff ff77 	bl	800177e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	0691      	lsls	r1, r2, #26
 8001896:	d522      	bpl.n	80018de <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	0692      	lsls	r2, r2, #26
 800189c:	d51f      	bpl.n	80018de <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800189e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018a4:	611a      	str	r2, [r3, #16]
    }
  }
}
 80018a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018aa:	f000 bc65 	b.w	8002178 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ae:	f7ff ff64 	bl	800177a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff ff62 	bl	800177c <HAL_TIM_PWM_PulseFinishedCallback>
 80018b8:	e776      	b.n	80017a8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	f7ff ff5e 	bl	800177a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff5c 	bl	800177c <HAL_TIM_PWM_PulseFinishedCallback>
 80018c4:	e785      	b.n	80017d2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	f7ff ff58 	bl	800177a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ff56 	bl	800177c <HAL_TIM_PWM_PulseFinishedCallback>
 80018d0:	e793      	b.n	80017fa <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	f7ff ff52 	bl	800177a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff50 	bl	800177c <HAL_TIM_PWM_PulseFinishedCallback>
 80018dc:	e7a2      	b.n	8001824 <HAL_TIM_IRQHandler+0xa4>
 80018de:	bd10      	pop	{r4, pc}

080018e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e0:	4a32      	ldr	r2, [pc, #200]	; (80019ac <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80018e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	4290      	cmp	r0, r2
 80018e6:	d012      	beq.n	800190e <TIM_Base_SetConfig+0x2e>
 80018e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018ec:	d00f      	beq.n	800190e <TIM_Base_SetConfig+0x2e>
 80018ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018f2:	4290      	cmp	r0, r2
 80018f4:	d00b      	beq.n	800190e <TIM_Base_SetConfig+0x2e>
 80018f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018fa:	4290      	cmp	r0, r2
 80018fc:	d007      	beq.n	800190e <TIM_Base_SetConfig+0x2e>
 80018fe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001902:	4290      	cmp	r0, r2
 8001904:	d003      	beq.n	800190e <TIM_Base_SetConfig+0x2e>
 8001906:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800190a:	4290      	cmp	r0, r2
 800190c:	d115      	bne.n	800193a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800190e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001914:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0xcc>)
 8001918:	4290      	cmp	r0, r2
 800191a:	d01d      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 800191c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001920:	d01a      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 8001922:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001926:	4290      	cmp	r0, r2
 8001928:	d016      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 800192a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192e:	4290      	cmp	r0, r2
 8001930:	d012      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 8001932:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001936:	4290      	cmp	r0, r2
 8001938:	d00e      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 800193a:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <TIM_Base_SetConfig+0xd0>)
 800193c:	4290      	cmp	r0, r2
 800193e:	d00b      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 8001940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001944:	4290      	cmp	r0, r2
 8001946:	d007      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 8001948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194c:	4290      	cmp	r0, r2
 800194e:	d003      	beq.n	8001958 <TIM_Base_SetConfig+0x78>
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	4290      	cmp	r0, r2
 8001956:	d103      	bne.n	8001960 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001958:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800195a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	694a      	ldr	r2, [r1, #20]
 8001962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001966:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001968:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800196a:	688b      	ldr	r3, [r1, #8]
 800196c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800196e:	680b      	ldr	r3, [r1, #0]
 8001970:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <TIM_Base_SetConfig+0xcc>)
 8001974:	4298      	cmp	r0, r3
 8001976:	d013      	beq.n	80019a0 <TIM_Base_SetConfig+0xc0>
 8001978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197c:	4298      	cmp	r0, r3
 800197e:	d00f      	beq.n	80019a0 <TIM_Base_SetConfig+0xc0>
 8001980:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001984:	4298      	cmp	r0, r3
 8001986:	d00b      	beq.n	80019a0 <TIM_Base_SetConfig+0xc0>
 8001988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198c:	4298      	cmp	r0, r3
 800198e:	d007      	beq.n	80019a0 <TIM_Base_SetConfig+0xc0>
 8001990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001994:	4298      	cmp	r0, r3
 8001996:	d003      	beq.n	80019a0 <TIM_Base_SetConfig+0xc0>
 8001998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199c:	4298      	cmp	r0, r3
 800199e:	d101      	bne.n	80019a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a0:	690b      	ldr	r3, [r1, #16]
 80019a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80019a4:	2301      	movs	r3, #1
 80019a6:	6143      	str	r3, [r0, #20]
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40014000 	.word	0x40014000

080019b4 <HAL_TIM_PWM_Init>:
{
 80019b4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019b6:	4604      	mov	r4, r0
 80019b8:	b1a0      	cbz	r0, 80019e4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019c2:	b91b      	cbnz	r3, 80019cc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019c8:	f001 f95a 	bl	8002c80 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019d2:	6820      	ldr	r0, [r4, #0]
 80019d4:	1d21      	adds	r1, r4, #4
 80019d6:	f7ff ff83 	bl	80018e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019da:	2301      	movs	r3, #1
 80019dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019e0:	2000      	movs	r0, #0
 80019e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	bd10      	pop	{r4, pc}

080019e8 <HAL_TIM_IC_Init>:
{
 80019e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019ea:	4604      	mov	r4, r0
 80019ec:	b1a0      	cbz	r0, 8001a18 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f6:	b91b      	cbnz	r3, 8001a00 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80019fc:	f001 f97e 	bl	8002cfc <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8001a00:	2302      	movs	r3, #2
 8001a02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	1d21      	adds	r1, r4, #4
 8001a0a:	f7ff ff69 	bl	80018e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a14:	2000      	movs	r0, #0
 8001a16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
}
 8001a1a:	bd10      	pop	{r4, pc}

08001a1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a1c:	6a03      	ldr	r3, [r0, #32]
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a24:	6a03      	ldr	r3, [r0, #32]
{
 8001a26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a28:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a36:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a3a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a3e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a40:	4d1f      	ldr	r5, [pc, #124]	; (8001ac0 <TIM_OC1_SetConfig+0xa4>)
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d013      	beq.n	8001a6e <TIM_OC1_SetConfig+0x52>
 8001a46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d00f      	beq.n	8001a6e <TIM_OC1_SetConfig+0x52>
 8001a4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001a52:	42a8      	cmp	r0, r5
 8001a54:	d00b      	beq.n	8001a6e <TIM_OC1_SetConfig+0x52>
 8001a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a5a:	42a8      	cmp	r0, r5
 8001a5c:	d007      	beq.n	8001a6e <TIM_OC1_SetConfig+0x52>
 8001a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a62:	42a8      	cmp	r0, r5
 8001a64:	d003      	beq.n	8001a6e <TIM_OC1_SetConfig+0x52>
 8001a66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a6a:	42a8      	cmp	r0, r5
 8001a6c:	d122      	bne.n	8001ab4 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a6e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a70:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a74:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a76:	4d12      	ldr	r5, [pc, #72]	; (8001ac0 <TIM_OC1_SetConfig+0xa4>)
 8001a78:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a7e:	d013      	beq.n	8001aa8 <TIM_OC1_SetConfig+0x8c>
 8001a80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a84:	42a8      	cmp	r0, r5
 8001a86:	d00f      	beq.n	8001aa8 <TIM_OC1_SetConfig+0x8c>
 8001a88:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001a8c:	42a8      	cmp	r0, r5
 8001a8e:	d00b      	beq.n	8001aa8 <TIM_OC1_SetConfig+0x8c>
 8001a90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a94:	42a8      	cmp	r0, r5
 8001a96:	d007      	beq.n	8001aa8 <TIM_OC1_SetConfig+0x8c>
 8001a98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a9c:	42a8      	cmp	r0, r5
 8001a9e:	d003      	beq.n	8001aa8 <TIM_OC1_SetConfig+0x8c>
 8001aa0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aa4:	42a8      	cmp	r0, r5
 8001aa6:	d105      	bne.n	8001ab4 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aa8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001aac:	698e      	ldr	r6, [r1, #24]
 8001aae:	694c      	ldr	r4, [r1, #20]
 8001ab0:	4334      	orrs	r4, r6
 8001ab2:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ab4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ab6:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ab8:	684a      	ldr	r2, [r1, #4]
 8001aba:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001abc:	6203      	str	r3, [r0, #32]
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	40012c00 	.word	0x40012c00

08001ac4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac4:	6a03      	ldr	r3, [r0, #32]
 8001ac6:	f023 0310 	bic.w	r3, r3, #16
 8001aca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001acc:	6a03      	ldr	r3, [r0, #32]
{
 8001ace:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001ad0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ad2:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ad6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ada:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ade:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ae2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001ae4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ae8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001aec:	4d1a      	ldr	r5, [pc, #104]	; (8001b58 <TIM_OC2_SetConfig+0x94>)
 8001aee:	42a8      	cmp	r0, r5
 8001af0:	d007      	beq.n	8001b02 <TIM_OC2_SetConfig+0x3e>
 8001af2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	d003      	beq.n	8001b02 <TIM_OC2_SetConfig+0x3e>
 8001afa:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001afe:	42a8      	cmp	r0, r5
 8001b00:	d10d      	bne.n	8001b1e <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b02:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b0c:	4d12      	ldr	r5, [pc, #72]	; (8001b58 <TIM_OC2_SetConfig+0x94>)
 8001b0e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b14:	d012      	beq.n	8001b3c <TIM_OC2_SetConfig+0x78>
 8001b16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b1a:	42a8      	cmp	r0, r5
 8001b1c:	d00e      	beq.n	8001b3c <TIM_OC2_SetConfig+0x78>
 8001b1e:	4d0f      	ldr	r5, [pc, #60]	; (8001b5c <TIM_OC2_SetConfig+0x98>)
 8001b20:	42a8      	cmp	r0, r5
 8001b22:	d00b      	beq.n	8001b3c <TIM_OC2_SetConfig+0x78>
 8001b24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b28:	42a8      	cmp	r0, r5
 8001b2a:	d007      	beq.n	8001b3c <TIM_OC2_SetConfig+0x78>
 8001b2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b30:	42a8      	cmp	r0, r5
 8001b32:	d003      	beq.n	8001b3c <TIM_OC2_SetConfig+0x78>
 8001b34:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b38:	42a8      	cmp	r0, r5
 8001b3a:	d106      	bne.n	8001b4a <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b3c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b40:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b42:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b44:	4334      	orrs	r4, r6
 8001b46:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b4c:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b4e:	684a      	ldr	r2, [r1, #4]
 8001b50:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b52:	6203      	str	r3, [r0, #32]
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
 8001b56:	bf00      	nop
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40014000 	.word	0x40014000

08001b60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b60:	6a03      	ldr	r3, [r0, #32]
 8001b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b66:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b68:	6a03      	ldr	r3, [r0, #32]
{
 8001b6a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b6c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001b72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b76:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b7a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b7c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b86:	4d1a      	ldr	r5, [pc, #104]	; (8001bf0 <TIM_OC3_SetConfig+0x90>)
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	d007      	beq.n	8001b9c <TIM_OC3_SetConfig+0x3c>
 8001b8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	d003      	beq.n	8001b9c <TIM_OC3_SetConfig+0x3c>
 8001b94:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d10d      	bne.n	8001bb8 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ba2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ba6:	4d12      	ldr	r5, [pc, #72]	; (8001bf0 <TIM_OC3_SetConfig+0x90>)
 8001ba8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bae:	d012      	beq.n	8001bd6 <TIM_OC3_SetConfig+0x76>
 8001bb0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bb4:	42a8      	cmp	r0, r5
 8001bb6:	d00e      	beq.n	8001bd6 <TIM_OC3_SetConfig+0x76>
 8001bb8:	4d0e      	ldr	r5, [pc, #56]	; (8001bf4 <TIM_OC3_SetConfig+0x94>)
 8001bba:	42a8      	cmp	r0, r5
 8001bbc:	d00b      	beq.n	8001bd6 <TIM_OC3_SetConfig+0x76>
 8001bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bc2:	42a8      	cmp	r0, r5
 8001bc4:	d007      	beq.n	8001bd6 <TIM_OC3_SetConfig+0x76>
 8001bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bca:	42a8      	cmp	r0, r5
 8001bcc:	d003      	beq.n	8001bd6 <TIM_OC3_SetConfig+0x76>
 8001bce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bd2:	42a8      	cmp	r0, r5
 8001bd4:	d106      	bne.n	8001be4 <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bd6:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001bda:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001bdc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001bde:	4334      	orrs	r4, r6
 8001be0:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001be6:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001be8:	684a      	ldr	r2, [r1, #4]
 8001bea:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001bec:	6203      	str	r3, [r0, #32]
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40014000 	.word	0x40014000

08001bf8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bf8:	6a03      	ldr	r3, [r0, #32]
 8001bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bfe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c00:	6a03      	ldr	r3, [r0, #32]
{
 8001c02:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001c04:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c06:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c0a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c0e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c16:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c20:	4d10      	ldr	r5, [pc, #64]	; (8001c64 <TIM_OC4_SetConfig+0x6c>)
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	d013      	beq.n	8001c4e <TIM_OC4_SetConfig+0x56>
 8001c26:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c2a:	42a8      	cmp	r0, r5
 8001c2c:	d00f      	beq.n	8001c4e <TIM_OC4_SetConfig+0x56>
 8001c2e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d00b      	beq.n	8001c4e <TIM_OC4_SetConfig+0x56>
 8001c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d007      	beq.n	8001c4e <TIM_OC4_SetConfig+0x56>
 8001c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c42:	42a8      	cmp	r0, r5
 8001c44:	d003      	beq.n	8001c4e <TIM_OC4_SetConfig+0x56>
 8001c46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d104      	bne.n	8001c58 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c4e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c50:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c58:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c5a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c5c:	684a      	ldr	r2, [r1, #4]
 8001c5e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c60:	6203      	str	r3, [r0, #32]
 8001c62:	bd30      	pop	{r4, r5, pc}
 8001c64:	40012c00 	.word	0x40012c00

08001c68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c6a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c6c:	4e18      	ldr	r6, [pc, #96]	; (8001cd0 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c6e:	f024 0401 	bic.w	r4, r4, #1
 8001c72:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c74:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001c76:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c78:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c7a:	d016      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001c7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c80:	d013      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001c82:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001c86:	42b0      	cmp	r0, r6
 8001c88:	d00f      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001c8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c8e:	42b0      	cmp	r0, r6
 8001c90:	d00b      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001c92:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8001c96:	42b0      	cmp	r0, r6
 8001c98:	d007      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001c9a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001c9e:	42b0      	cmp	r0, r6
 8001ca0:	d003      	beq.n	8001caa <TIM_TI1_SetConfig+0x42>
 8001ca2:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001ca6:	42b0      	cmp	r0, r6
 8001ca8:	d10f      	bne.n	8001cca <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001caa:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001cae:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cb0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cb6:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cb8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cbc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cc0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cc2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cc4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cc6:	6201      	str	r1, [r0, #32]
}
 8001cc8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001cca:	f044 0201 	orr.w	r2, r4, #1
 8001cce:	e7ef      	b.n	8001cb0 <TIM_TI1_SetConfig+0x48>
 8001cd0:	40012c00 	.word	0x40012c00

08001cd4 <HAL_TIM_IC_ConfigChannel>:
{
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001cd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cda:	2b01      	cmp	r3, #1
{
 8001cdc:	4604      	mov	r4, r0
 8001cde:	460d      	mov	r5, r1
 8001ce0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ce4:	d019      	beq.n	8001d1a <HAL_TIM_IC_ConfigChannel+0x46>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001cf0:	b9a2      	cbnz	r2, 8001d1c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001cf2:	68cb      	ldr	r3, [r1, #12]
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	c906      	ldmia	r1, {r1, r2}
 8001cf8:	f7ff ffb6 	bl	8001c68 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001cfc:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001cfe:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f022 020c 	bic.w	r2, r2, #12
 8001d06:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d0e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d16:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d1c:	2a04      	cmp	r2, #4
 8001d1e:	688e      	ldr	r6, [r1, #8]
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	68e8      	ldr	r0, [r5, #12]
 8001d24:	c982      	ldmia	r1, {r1, r7}
 8001d26:	d11f      	bne.n	8001d68 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	f022 0210 	bic.w	r2, r2, #16
 8001d2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d30:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d32:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d38:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d3c:	0300      	lsls	r0, r0, #12
 8001d3e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d40:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d44:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d46:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d48:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d4c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d50:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d54:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d5c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001d64:	619e      	str	r6, [r3, #24]
 8001d66:	e7d2      	b.n	8001d0e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001d68:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001d6c:	d11c      	bne.n	8001da8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d74:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001d76:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001d78:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001d7c:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001d7e:	0100      	lsls	r0, r0, #4
 8001d80:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001d82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d86:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001d88:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d8a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001d8e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d92:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001d96:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	f022 020c 	bic.w	r2, r2, #12
 8001d9e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001da4:	61de      	str	r6, [r3, #28]
 8001da6:	e7b2      	b.n	8001d0e <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dae:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001db0:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001db2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001db6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dba:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001dbc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dc0:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dc2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dc4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dc6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001dca:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dce:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001dd0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001dd2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001dda:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001de2:	e7df      	b.n	8001da4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001de4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001de4:	6a03      	ldr	r3, [r0, #32]
{
 8001de6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001de8:	2401      	movs	r4, #1
 8001dea:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001dec:	ea23 0304 	bic.w	r3, r3, r4
 8001df0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001df2:	6a03      	ldr	r3, [r0, #32]
 8001df4:	408a      	lsls	r2, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	6202      	str	r2, [r0, #32]
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <HAL_TIM_PWM_Start>:
{
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e00:	2201      	movs	r2, #1
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	f7ff ffee 	bl	8001de4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_PWM_Start+0x50>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_TIM_PWM_Start+0x3c>
 8001e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00f      	beq.n	8001e38 <HAL_TIM_PWM_Start+0x3c>
 8001e18:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <HAL_TIM_PWM_Start+0x3c>
 8001e20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_TIM_PWM_Start+0x3c>
 8001e28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <HAL_TIM_PWM_Start+0x3c>
 8001e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d103      	bne.n	8001e40 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
} 
 8001e48:	2000      	movs	r0, #0
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	40012c00 	.word	0x40012c00

08001e50 <HAL_TIM_IC_Start_IT>:
{
 8001e50:	b510      	push	{r4, lr}
 8001e52:	4604      	mov	r4, r0
  switch (Channel)
 8001e54:	290c      	cmp	r1, #12
 8001e56:	d80d      	bhi.n	8001e74 <HAL_TIM_IC_Start_IT+0x24>
 8001e58:	e8df f001 	tbb	[pc, r1]
 8001e5c:	0c0c0c07 	.word	0x0c0c0c07
 8001e60:	0c0c0c17 	.word	0x0c0c0c17
 8001e64:	0c0c0c1c 	.word	0x0c0c0c1c
 8001e68:	21          	.byte	0x21
 8001e69:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	68d3      	ldr	r3, [r2, #12]
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e72:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ffb4 	bl	8001de4 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6813      	ldr	r3, [r2, #0]
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6013      	str	r3, [r2, #0]
} 
 8001e86:	2000      	movs	r0, #0
 8001e88:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e8a:	6802      	ldr	r2, [r0, #0]
 8001e8c:	68d3      	ldr	r3, [r2, #12]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	e7ee      	b.n	8001e72 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e94:	6802      	ldr	r2, [r0, #0]
 8001e96:	68d3      	ldr	r3, [r2, #12]
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	e7e9      	b.n	8001e72 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	68d3      	ldr	r3, [r2, #12]
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	e7e4      	b.n	8001e72 <HAL_TIM_IC_Start_IT+0x22>

08001ea8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ea8:	6a03      	ldr	r3, [r0, #32]
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eb0:	6a03      	ldr	r3, [r0, #32]
{
 8001eb2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001eb4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001eb6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001eba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ebe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001ec2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001ec4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001ec6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001eca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ece:	4d11      	ldr	r5, [pc, #68]	; (8001f14 <TIM_OC5_SetConfig+0x6c>)
 8001ed0:	42a8      	cmp	r0, r5
 8001ed2:	d013      	beq.n	8001efc <TIM_OC5_SetConfig+0x54>
 8001ed4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ed8:	42a8      	cmp	r0, r5
 8001eda:	d00f      	beq.n	8001efc <TIM_OC5_SetConfig+0x54>
 8001edc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ee0:	42a8      	cmp	r0, r5
 8001ee2:	d00b      	beq.n	8001efc <TIM_OC5_SetConfig+0x54>
 8001ee4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee8:	42a8      	cmp	r0, r5
 8001eea:	d007      	beq.n	8001efc <TIM_OC5_SetConfig+0x54>
 8001eec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ef0:	42a8      	cmp	r0, r5
 8001ef2:	d003      	beq.n	8001efc <TIM_OC5_SetConfig+0x54>
 8001ef4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ef8:	42a8      	cmp	r0, r5
 8001efa:	d104      	bne.n	8001f06 <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001efc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001efe:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f02:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f06:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f08:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f0a:	684a      	ldr	r2, [r1, #4]
 8001f0c:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f0e:	6203      	str	r3, [r0, #32]
 8001f10:	bd30      	pop	{r4, r5, pc}
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f18:	6a03      	ldr	r3, [r0, #32]
 8001f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f1e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f20:	6a03      	ldr	r3, [r0, #32]
{
 8001f22:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f24:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f26:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f3c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f40:	4d10      	ldr	r5, [pc, #64]	; (8001f84 <TIM_OC6_SetConfig+0x6c>)
 8001f42:	42a8      	cmp	r0, r5
 8001f44:	d013      	beq.n	8001f6e <TIM_OC6_SetConfig+0x56>
 8001f46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f4a:	42a8      	cmp	r0, r5
 8001f4c:	d00f      	beq.n	8001f6e <TIM_OC6_SetConfig+0x56>
 8001f4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001f52:	42a8      	cmp	r0, r5
 8001f54:	d00b      	beq.n	8001f6e <TIM_OC6_SetConfig+0x56>
 8001f56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f5a:	42a8      	cmp	r0, r5
 8001f5c:	d007      	beq.n	8001f6e <TIM_OC6_SetConfig+0x56>
 8001f5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f62:	42a8      	cmp	r0, r5
 8001f64:	d003      	beq.n	8001f6e <TIM_OC6_SetConfig+0x56>
 8001f66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f6a:	42a8      	cmp	r0, r5
 8001f6c:	d104      	bne.n	8001f78 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f6e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f70:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f74:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f78:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f7a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f7c:	684a      	ldr	r2, [r1, #4]
 8001f7e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f80:	6203      	str	r3, [r0, #32]
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	40012c00 	.word	0x40012c00

08001f88 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f8e:	2b01      	cmp	r3, #1
{
 8001f90:	4604      	mov	r4, r0
 8001f92:	460d      	mov	r5, r1
 8001f94:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001f98:	d010      	beq.n	8001fbc <HAL_TIM_PWM_ConfigChannel+0x34>
 8001f9a:	2301      	movs	r3, #1
  switch (Channel)
 8001f9c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001f9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001fa6:	d043      	beq.n	8002030 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001fa8:	d809      	bhi.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x36>
 8001faa:	b1fa      	cbz	r2, 8001fec <HAL_TIM_PWM_ConfigChannel+0x64>
 8001fac:	2a04      	cmp	r2, #4
 8001fae:	d02e      	beq.n	800200e <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fb2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fb8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001fbe:	2a10      	cmp	r2, #16
 8001fc0:	d047      	beq.n	8002052 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001fc2:	2a14      	cmp	r2, #20
 8001fc4:	d056      	beq.n	8002074 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001fc6:	2a0c      	cmp	r2, #12
 8001fc8:	d1f2      	bne.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	f7ff fe14 	bl	8001bf8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fd0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001fd2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fea:	e030      	b.n	800204e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fec:	6820      	ldr	r0, [r4, #0]
 8001fee:	f7ff fd15 	bl	8001a1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ff2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	f022 0204 	bic.w	r2, r2, #4
 8002004:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800200a:	619a      	str	r2, [r3, #24]
    break;
 800200c:	e7d0      	b.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f7ff fd58 	bl	8001ac4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002014:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002016:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800202e:	e7ec      	b.n	800200a <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	f7ff fd95 	bl	8001b60 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002036:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002038:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	f042 0208 	orr.w	r2, r2, #8
 8002040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	f022 0204 	bic.w	r2, r2, #4
 8002048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800204e:	61da      	str	r2, [r3, #28]
    break;
 8002050:	e7ae      	b.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002052:	6820      	ldr	r0, [r4, #0]
 8002054:	f7ff ff28 	bl	8001ea8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002058:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800205a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800205c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002066:	f022 0204 	bic.w	r2, r2, #4
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800206c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800206e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8002072:	e79d      	b.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002074:	6820      	ldr	r0, [r4, #0]
 8002076:	f7ff ff4f 	bl	8001f18 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800207a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800207c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800207e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002086:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800208e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002090:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002094:	e7ec      	b.n	8002070 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08002098 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800209c:	2b01      	cmp	r3, #1
{
 800209e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80020a0:	d020      	beq.n	80020e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 80020a2:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020a4:	4d10      	ldr	r5, [pc, #64]	; (80020e8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80020a6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80020a8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80020aa:	42aa      	cmp	r2, r5
 80020ac:	d007      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80020ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020b2:	42aa      	cmp	r2, r5
 80020b4:	d003      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80020b6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80020ba:	42aa      	cmp	r2, r5
 80020bc:	d103      	bne.n	80020c6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020be:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020c4:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020ce:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80020d0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80020d4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020d6:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80020d8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80020da:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80020dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80020e4:	2002      	movs	r0, #2
} 
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	40012c00 	.word	0x40012c00

080020ec <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80020ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
{
 80020f2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80020f4:	d03c      	beq.n	8002170 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020f6:	68cb      	ldr	r3, [r1, #12]
 80020f8:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80020fa:	4c1e      	ldr	r4, [pc, #120]	; (8002174 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002102:	684a      	ldr	r2, [r1, #4]
 8002104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002108:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800210a:	680a      	ldr	r2, [r1, #0]
 800210c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002110:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002112:	690a      	ldr	r2, [r1, #16]
 8002114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002118:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800211a:	694a      	ldr	r2, [r1, #20]
 800211c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002120:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002122:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002128:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800212a:	698a      	ldr	r2, [r1, #24]
 800212c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002134:	6802      	ldr	r2, [r0, #0]
 8002136:	42a2      	cmp	r2, r4
 8002138:	d007      	beq.n	800214a <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800213a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800213e:	42a2      	cmp	r2, r4
 8002140:	d003      	beq.n	800214a <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002142:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8002146:	42a2      	cmp	r2, r4
 8002148:	d10c      	bne.n	8002164 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800214a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800214c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002150:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002154:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002156:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800215e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002162:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002166:	2300      	movs	r3, #0
 8002168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800216c:	4618      	mov	r0, r3
 800216e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002170:	2002      	movs	r0, #2
}
 8002172:	bd10      	pop	{r4, pc}
 8002174:	40012c00 	.word	0x40012c00

08002178 <HAL_TIMEx_CommutationCallback>:
 8002178:	4770      	bx	lr

0800217a <HAL_TIMEx_BreakCallback>:
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_Break2Callback>:
{
 800217c:	4770      	bx	lr
	...

08002180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002184:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002186:	6921      	ldr	r1, [r4, #16]
 8002188:	68a2      	ldr	r2, [r4, #8]
 800218a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800218c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218e:	430a      	orrs	r2, r1
 8002190:	6961      	ldr	r1, [r4, #20]
 8002192:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002194:	4977      	ldr	r1, [pc, #476]	; (8002374 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002196:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002198:	4001      	ands	r1, r0
 800219a:	430a      	orrs	r2, r1
 800219c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219e:	686a      	ldr	r2, [r5, #4]
 80021a0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80021a2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021a8:	430a      	orrs	r2, r1
 80021aa:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021ac:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80021ae:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021b0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80021b4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021b6:	430a      	orrs	r2, r1
 80021b8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ba:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <UART_SetConfig+0x1f8>)
 80021bc:	4295      	cmp	r5, r2
 80021be:	d112      	bne.n	80021e6 <UART_SetConfig+0x66>
 80021c0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80021c4:	496d      	ldr	r1, [pc, #436]	; (800237c <UART_SetConfig+0x1fc>)
 80021c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021c8:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d0:	5c8a      	ldrb	r2, [r1, r2]
 80021d2:	d066      	beq.n	80022a2 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80021d4:	2a08      	cmp	r2, #8
 80021d6:	d819      	bhi.n	800220c <UART_SetConfig+0x8c>
 80021d8:	e8df f002 	tbb	[pc, r2]
 80021dc:	189e92c2 	.word	0x189e92c2
 80021e0:	181818a9 	.word	0x181818a9
 80021e4:	ac          	.byte	0xac
 80021e5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021e6:	4a66      	ldr	r2, [pc, #408]	; (8002380 <UART_SetConfig+0x200>)
 80021e8:	4295      	cmp	r5, r2
 80021ea:	d124      	bne.n	8002236 <UART_SetConfig+0xb6>
 80021ec:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80021f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80021f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021fa:	f000 80a0 	beq.w	800233e <UART_SetConfig+0x1be>
 80021fe:	d807      	bhi.n	8002210 <UART_SetConfig+0x90>
 8002200:	2a00      	cmp	r2, #0
 8002202:	f000 80aa 	beq.w	800235a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220a:	d076      	beq.n	80022fa <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800220c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800220e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002210:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002214:	f000 8099 	beq.w	800234a <UART_SetConfig+0x1ca>
 8002218:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800221c:	d1f3      	bne.n	8002206 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800221e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002222:	d179      	bne.n	8002318 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002224:	6860      	ldr	r0, [r4, #4]
 8002226:	0843      	lsrs	r3, r0, #1
 8002228:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800222c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002230:	fbb3 f3f0 	udiv	r3, r3, r0
 8002234:	e054      	b.n	80022e0 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002236:	4a53      	ldr	r2, [pc, #332]	; (8002384 <UART_SetConfig+0x204>)
 8002238:	4295      	cmp	r5, r2
 800223a:	d10e      	bne.n	800225a <UART_SetConfig+0xda>
 800223c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002242:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002246:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800224a:	d078      	beq.n	800233e <UART_SetConfig+0x1be>
 800224c:	d9d8      	bls.n	8002200 <UART_SetConfig+0x80>
 800224e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002252:	d07a      	beq.n	800234a <UART_SetConfig+0x1ca>
 8002254:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002258:	e7e0      	b.n	800221c <UART_SetConfig+0x9c>
 800225a:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <UART_SetConfig+0x208>)
 800225c:	4295      	cmp	r5, r2
 800225e:	d10e      	bne.n	800227e <UART_SetConfig+0xfe>
 8002260:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002264:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002266:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800226a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800226e:	d066      	beq.n	800233e <UART_SetConfig+0x1be>
 8002270:	d9c6      	bls.n	8002200 <UART_SetConfig+0x80>
 8002272:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002276:	d068      	beq.n	800234a <UART_SetConfig+0x1ca>
 8002278:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800227c:	e7ce      	b.n	800221c <UART_SetConfig+0x9c>
 800227e:	4a43      	ldr	r2, [pc, #268]	; (800238c <UART_SetConfig+0x20c>)
 8002280:	4295      	cmp	r5, r2
 8002282:	d1c0      	bne.n	8002206 <UART_SetConfig+0x86>
 8002284:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800228a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800228e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002292:	d054      	beq.n	800233e <UART_SetConfig+0x1be>
 8002294:	d9b4      	bls.n	8002200 <UART_SetConfig+0x80>
 8002296:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800229a:	d056      	beq.n	800234a <UART_SetConfig+0x1ca>
 800229c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80022a0:	e7bc      	b.n	800221c <UART_SetConfig+0x9c>
    switch (clocksource)
 80022a2:	2a08      	cmp	r2, #8
 80022a4:	d829      	bhi.n	80022fa <UART_SetConfig+0x17a>
 80022a6:	a301      	add	r3, pc, #4	; (adr r3, 80022ac <UART_SetConfig+0x12c>)
 80022a8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80022ac:	080022d1 	.word	0x080022d1
 80022b0:	080022f5 	.word	0x080022f5
 80022b4:	08002225 	.word	0x08002225
 80022b8:	080022fb 	.word	0x080022fb
 80022bc:	08002345 	.word	0x08002345
 80022c0:	080022fb 	.word	0x080022fb
 80022c4:	080022fb 	.word	0x080022fb
 80022c8:	080022fb 	.word	0x080022fb
 80022cc:	08002351 	.word	0x08002351
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022d0:	f7ff f8de 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022d4:	6861      	ldr	r1, [r4, #4]
 80022d6:	084a      	lsrs	r2, r1, #1
 80022d8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80022dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022e2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80022e4:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80022e8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022ea:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022f4:	f7ff f8e4 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 80022f8:	e7ec      	b.n	80022d4 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e7f1      	b.n	80022e4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002300:	f7ff f8de 	bl	80014c0 <HAL_RCC_GetPCLK2Freq>
 8002304:	6863      	ldr	r3, [r4, #4]
 8002306:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800230a:	fbb0 f0f3 	udiv	r0, r0, r3
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <UART_SetConfig+0x1f8>)
 8002310:	b280      	uxth	r0, r0
 8002312:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002314:	2000      	movs	r0, #0
        break;
 8002316:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002318:	6862      	ldr	r2, [r4, #4]
 800231a:	0853      	lsrs	r3, r2, #1
 800231c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002320:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002324:	fbb3 f3f2 	udiv	r3, r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	60eb      	str	r3, [r5, #12]
 800232c:	e7f2      	b.n	8002314 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800232e:	f7fe ffd9 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 8002332:	e017      	b.n	8002364 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002334:	6862      	ldr	r2, [r4, #4]
 8002336:	0853      	lsrs	r3, r2, #1
 8002338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800233c:	e7f2      	b.n	8002324 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800233e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002342:	d1f4      	bne.n	800232e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002344:	f7fe ffce 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 8002348:	e7c4      	b.n	80022d4 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234e:	d1f1      	bne.n	8002334 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002350:	6860      	ldr	r0, [r4, #4]
 8002352:	0843      	lsrs	r3, r0, #1
 8002354:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002358:	e76a      	b.n	8002230 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235e:	d0b7      	beq.n	80022d0 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002360:	f7ff f896 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002364:	6863      	ldr	r3, [r4, #4]
 8002366:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800236a:	fbb0 f0f3 	udiv	r0, r0, r3
 800236e:	b280      	uxth	r0, r0
 8002370:	60e8      	str	r0, [r5, #12]
 8002372:	e7cf      	b.n	8002314 <UART_SetConfig+0x194>
 8002374:	efff69f3 	.word	0xefff69f3
 8002378:	40013800 	.word	0x40013800
 800237c:	080030b8 	.word	0x080030b8
 8002380:	40004400 	.word	0x40004400
 8002384:	40004800 	.word	0x40004800
 8002388:	40004c00 	.word	0x40004c00
 800238c:	40005000 	.word	0x40005000

08002390 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002392:	07da      	lsls	r2, r3, #31
{
 8002394:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002396:	d506      	bpl.n	80023a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002398:	6801      	ldr	r1, [r0, #0]
 800239a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800239c:	684a      	ldr	r2, [r1, #4]
 800239e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80023a2:	4322      	orrs	r2, r4
 80023a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023a6:	079c      	lsls	r4, r3, #30
 80023a8:	d506      	bpl.n	80023b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023aa:	6801      	ldr	r1, [r0, #0]
 80023ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023ae:	684a      	ldr	r2, [r1, #4]
 80023b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023b4:	4322      	orrs	r2, r4
 80023b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023b8:	0759      	lsls	r1, r3, #29
 80023ba:	d506      	bpl.n	80023ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023bc:	6801      	ldr	r1, [r0, #0]
 80023be:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80023c0:	684a      	ldr	r2, [r1, #4]
 80023c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c6:	4322      	orrs	r2, r4
 80023c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023ca:	071a      	lsls	r2, r3, #28
 80023cc:	d506      	bpl.n	80023dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023ce:	6801      	ldr	r1, [r0, #0]
 80023d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023d2:	684a      	ldr	r2, [r1, #4]
 80023d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d8:	4322      	orrs	r2, r4
 80023da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023dc:	06dc      	lsls	r4, r3, #27
 80023de:	d506      	bpl.n	80023ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e0:	6801      	ldr	r1, [r0, #0]
 80023e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80023e4:	688a      	ldr	r2, [r1, #8]
 80023e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ea:	4322      	orrs	r2, r4
 80023ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ee:	0699      	lsls	r1, r3, #26
 80023f0:	d506      	bpl.n	8002400 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f2:	6801      	ldr	r1, [r0, #0]
 80023f4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80023f6:	688a      	ldr	r2, [r1, #8]
 80023f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023fc:	4322      	orrs	r2, r4
 80023fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002400:	065a      	lsls	r2, r3, #25
 8002402:	d50f      	bpl.n	8002424 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002404:	6801      	ldr	r1, [r0, #0]
 8002406:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002408:	684a      	ldr	r2, [r1, #4]
 800240a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800240e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002410:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002414:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002416:	d105      	bne.n	8002424 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002418:	684a      	ldr	r2, [r1, #4]
 800241a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800241c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002420:	4322      	orrs	r2, r4
 8002422:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	d506      	bpl.n	8002436 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002428:	6802      	ldr	r2, [r0, #0]
 800242a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800242c:	6853      	ldr	r3, [r2, #4]
 800242e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002432:	430b      	orrs	r3, r1
 8002434:	6053      	str	r3, [r2, #4]
 8002436:	bd10      	pop	{r4, pc}

08002438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243c:	9d06      	ldr	r5, [sp, #24]
 800243e:	4604      	mov	r4, r0
 8002440:	460f      	mov	r7, r1
 8002442:	4616      	mov	r6, r2
 8002444:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002446:	6821      	ldr	r1, [r4, #0]
 8002448:	69ca      	ldr	r2, [r1, #28]
 800244a:	ea37 0302 	bics.w	r3, r7, r2
 800244e:	bf0c      	ite	eq
 8002450:	2201      	moveq	r2, #1
 8002452:	2200      	movne	r2, #0
 8002454:	42b2      	cmp	r2, r6
 8002456:	d002      	beq.n	800245e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002458:	2000      	movs	r0, #0
}
 800245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800245e:	1c6b      	adds	r3, r5, #1
 8002460:	d0f2      	beq.n	8002448 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002462:	b99d      	cbnz	r5, 800248c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800246c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002476:	2320      	movs	r3, #32
 8002478:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800247c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002480:	2300      	movs	r3, #0
 8002482:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002486:	2003      	movs	r0, #3
 8002488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800248c:	f7fe fb5e 	bl	8000b4c <HAL_GetTick>
 8002490:	eba0 0008 	sub.w	r0, r0, r8
 8002494:	4285      	cmp	r5, r0
 8002496:	d2d6      	bcs.n	8002446 <UART_WaitOnFlagUntilTimeout+0xe>
 8002498:	e7e4      	b.n	8002464 <UART_WaitOnFlagUntilTimeout+0x2c>

0800249a <UART_CheckIdleState>:
{
 800249a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800249c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	2600      	movs	r6, #0
 80024a0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80024a2:	f7fe fb53 	bl	8000b4c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80024ac:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024ae:	d417      	bmi.n	80024e0 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	075b      	lsls	r3, r3, #29
 80024b6:	d50a      	bpl.n	80024ce <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	462b      	mov	r3, r5
 80024c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff ffb6 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80024cc:	b9a0      	cbnz	r0, 80024f8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80024ce:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80024d0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80024d2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80024d6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80024da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80024de:	e00c      	b.n	80024fa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4632      	mov	r2, r6
 80024e8:	4603      	mov	r3, r0
 80024ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ffa2 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d0db      	beq.n	80024b0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80024f8:	2003      	movs	r0, #3
}
 80024fa:	b002      	add	sp, #8
 80024fc:	bd70      	pop	{r4, r5, r6, pc}

080024fe <HAL_UART_Init>:
{
 80024fe:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002500:	4604      	mov	r4, r0
 8002502:	b360      	cbz	r0, 800255e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002504:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800250c:	b91b      	cbnz	r3, 8002516 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800250e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002512:	f000 fcd7 	bl	8002ec4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002516:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002518:	2324      	movs	r3, #36	; 0x24
 800251a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800251e:	6813      	ldr	r3, [r2, #0]
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fe2a 	bl	8002180 <UART_SetConfig>
 800252c:	2801      	cmp	r0, #1
 800252e:	d016      	beq.n	800255e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002532:	b113      	cbz	r3, 800253a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff ff2b 	bl	8002390 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800254a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002552:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800255a:	f7ff bf9e 	b.w	800249a <UART_CheckIdleState>
}
 800255e:	2001      	movs	r0, #1
 8002560:	bd10      	pop	{r4, pc}
	...

08002564 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8002564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(htim->Instance==TIM2){
 8002568:	6803      	ldr	r3, [r0, #0]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 800256e:	4604      	mov	r4, r0
	if(htim->Instance==TIM2){
 8002570:	d10a      	bne.n	8002588 <HAL_TIM_IC_CaptureCallback+0x24>
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1){
 8002572:	2101      	movs	r1, #1
 8002574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002578:	f7fe fc26 	bl	8000dc8 <HAL_GPIO_ReadPin>
 800257c:	4b8f      	ldr	r3, [pc, #572]	; (80027bc <HAL_TIM_IC_CaptureCallback+0x258>)
 800257e:	2801      	cmp	r0, #1
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8002580:	681b      	ldr	r3, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1){
 8002582:	d144      	bne.n	800260e <HAL_TIM_IC_CaptureCallback+0xaa>
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
//				HAL_UART_Transmit(&huart2,"1:",2,0xFFFF);
//				HAL_UART_Transmit(&huart2,tosend,sizeof(tosend),0xffff);

			}
		}
		if(htim->Instance==TIM3){
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800258c:	4d8d      	ldr	r5, [pc, #564]	; (80027c4 <HAL_TIM_IC_CaptureCallback+0x260>)
 800258e:	429a      	cmp	r2, r3
 8002590:	d10a      	bne.n	80025a8 <HAL_TIM_IC_CaptureCallback+0x44>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){
 8002592:	2110      	movs	r1, #16
 8002594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002598:	f7fe fc16 	bl	8000dc8 <HAL_GPIO_ReadPin>
 800259c:	4b8a      	ldr	r3, [pc, #552]	; (80027c8 <HAL_TIM_IC_CaptureCallback+0x264>)
 800259e:	2801      	cmp	r0, #1
					__HAL_TIM_SET_COUNTER(&htim3,0);
 80025a0:	681b      	ldr	r3, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==1){
 80025a2:	d157      	bne.n	8002654 <HAL_TIM_IC_CaptureCallback+0xf0>
					__HAL_TIM_SET_COUNTER(&htim3,0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
//					HAL_UART_Transmit(&huart2,"2:",2,0xFFFF);
//					HAL_UART_Transmit(&huart2,tosend1,sizeof(tosend1),0xffff);

				}
			}
		if(htim->Instance==TIM15){
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_TIM_IC_CaptureCallback+0x268>)
 80025ac:	4e88      	ldr	r6, [pc, #544]	; (80027d0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10a      	bne.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x64>
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==1){
 80025b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b6:	4887      	ldr	r0, [pc, #540]	; (80027d4 <HAL_TIM_IC_CaptureCallback+0x270>)
 80025b8:	f7fe fc06 	bl	8000dc8 <HAL_GPIO_ReadPin>
 80025bc:	4b86      	ldr	r3, [pc, #536]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80025be:	2801      	cmp	r0, #1
					__HAL_TIM_SET_COUNTER(&htim15,0);
 80025c0:	681b      	ldr	r3, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==1){
 80025c2:	d169      	bne.n	8002698 <HAL_TIM_IC_CaptureCallback+0x134>
					__HAL_TIM_SET_COUNTER(&htim15,0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
//
//		}

	//	char tosend3[20]={0};
		//==============Enter===============
		 if(center<50){
 80025c8:	2200      	movs	r2, #0
 80025ca:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_TIM_IC_CaptureCallback+0x278>)
 80025cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80025d0:	f7fe fa2a 	bl	8000a28 <__aeabi_dcmplt>
 80025d4:	4607      	mov	r7, r0
 80025d6:	2800      	cmp	r0, #0
 80025d8:	f000 808a 	beq.w	80026f0 <HAL_TIM_IC_CaptureCallback+0x18c>
			//left
			 if(right<60 && left>30){
 80025dc:	2200      	movs	r2, #0
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80025e0:	4c80      	ldr	r4, [pc, #512]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80025e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80025e6:	f7fe fa1f 	bl	8000a28 <__aeabi_dcmplt>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d076      	beq.n	80026dc <HAL_TIM_IC_CaptureCallback+0x178>
 80025ee:	497e      	ldr	r1, [pc, #504]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_TIM_IC_CaptureCallback+0x288>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f8:	f7fe fa34 	bl	8000a64 <__aeabi_dcmpgt>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d06d      	beq.n	80026dc <HAL_TIM_IC_CaptureCallback+0x178>
				 TIM8->CCR4=0;//left reverse
 8002600:	2200      	movs	r2, #0
			     TIM8->CCR3=81; // 81
 8002602:	2151      	movs	r1, #81	; 0x51
				 TIM8->CCR4=0;//left reverse
 8002604:	6422      	str	r2, [r4, #64]	; 0x40
			     TIM8->CCR3=81; // 81
 8002606:	63e1      	str	r1, [r4, #60]	; 0x3c
			     TIM4->CCR3=81; // 81
 8002608:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x28c>)
				  }
			  }
			   //straight
			   TIM8->CCR4=73; // 78
			   TIM8->CCR3=0;
			   TIM4->CCR3=75; //80
 800260a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800260c:	e06d      	b.n	80026ea <HAL_TIM_IC_CaptureCallback+0x186>
				cnt=__HAL_TIM_GET_COUNTER(&htim2);
 800260e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002610:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002612:	6018      	str	r0, [r3, #0]
				left=cnt/(double)58;
 8002614:	f7fd ff30 	bl	8000478 <__aeabi_i2d>
 8002618:	2200      	movs	r2, #0
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <HAL_TIM_IC_CaptureCallback+0x294>)
 800261c:	f7fe f8bc 	bl	8000798 <__aeabi_ddiv>
 8002620:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002622:	460f      	mov	r7, r1
 8002624:	4606      	mov	r6, r0
 8002626:	e9c3 6700 	strd	r6, r7, [r3]
				integer=(int)left;
 800262a:	f7fe fa25 	bl	8000a78 <__aeabi_d2iz>
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_TIM_IC_CaptureCallback+0x298>)
 8002630:	6018      	str	r0, [r3, #0]
				point=(int)((left-integer)*100);
 8002632:	f7fd ff21 	bl	8000478 <__aeabi_i2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4630      	mov	r0, r6
 800263c:	4639      	mov	r1, r7
 800263e:	f7fd fdcd 	bl	80001dc <__aeabi_dsub>
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002644:	2200      	movs	r2, #0
 8002646:	f7fd ff7d 	bl	8000544 <__aeabi_dmul>
 800264a:	f7fe fa15 	bl	8000a78 <__aeabi_d2iz>
 800264e:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8002650:	6018      	str	r0, [r3, #0]
 8002652:	e799      	b.n	8002588 <HAL_TIM_IC_CaptureCallback+0x24>
					cnt1=__HAL_TIM_GET_COUNTER(&htim3);
 8002654:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002656:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8002658:	6018      	str	r0, [r3, #0]
					center=cnt1/(double)58;
 800265a:	f7fd ff0d 	bl	8000478 <__aeabi_i2d>
 800265e:	2200      	movs	r2, #0
 8002660:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_TIM_IC_CaptureCallback+0x294>)
 8002662:	f7fe f899 	bl	8000798 <__aeabi_ddiv>
 8002666:	460f      	mov	r7, r1
 8002668:	4606      	mov	r6, r0
 800266a:	e9c5 6700 	strd	r6, r7, [r5]
					integer1=(int)center;
 800266e:	f7fe fa03 	bl	8000a78 <__aeabi_d2iz>
 8002672:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8002674:	6018      	str	r0, [r3, #0]
					point1=(int)((center-integer1)*100);
 8002676:	f7fd feff 	bl	8000478 <__aeabi_i2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4630      	mov	r0, r6
 8002680:	4639      	mov	r1, r7
 8002682:	f7fd fdab 	bl	80001dc <__aeabi_dsub>
 8002686:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002688:	2200      	movs	r2, #0
 800268a:	f7fd ff5b 	bl	8000544 <__aeabi_dmul>
 800268e:	f7fe f9f3 	bl	8000a78 <__aeabi_d2iz>
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8002694:	6018      	str	r0, [r3, #0]
 8002696:	e787      	b.n	80025a8 <HAL_TIM_IC_CaptureCallback+0x44>
					cnt2=__HAL_TIM_GET_COUNTER(&htim15);
 8002698:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 800269c:	6018      	str	r0, [r3, #0]
					right=cnt2/(double)58;
 800269e:	f7fd feeb 	bl	8000478 <__aeabi_i2d>
 80026a2:	2200      	movs	r2, #0
 80026a4:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <HAL_TIM_IC_CaptureCallback+0x294>)
 80026a6:	f7fe f877 	bl	8000798 <__aeabi_ddiv>
 80026aa:	4689      	mov	r9, r1
 80026ac:	4680      	mov	r8, r0
 80026ae:	e9c6 8900 	strd	r8, r9, [r6]
					integer2=(int)right;
 80026b2:	f7fe f9e1 	bl	8000a78 <__aeabi_d2iz>
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80026b8:	6018      	str	r0, [r3, #0]
					point2=(int)((right-integer2)*100);
 80026ba:	f7fd fedd 	bl	8000478 <__aeabi_i2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4640      	mov	r0, r8
 80026c4:	4649      	mov	r1, r9
 80026c6:	f7fd fd89 	bl	80001dc <__aeabi_dsub>
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f7fd ff39 	bl	8000544 <__aeabi_dmul>
 80026d2:	f7fe f9d1 	bl	8000a78 <__aeabi_d2iz>
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80026d8:	6018      	str	r0, [r3, #0]
 80026da:	e775      	b.n	80025c8 <HAL_TIM_IC_CaptureCallback+0x64>
			     TIM8->CCR4=90; //90
 80026dc:	235a      	movs	r3, #90	; 0x5a
 80026de:	6423      	str	r3, [r4, #64]	; 0x40
			     TIM4->CCR3=0;
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_TIM_IC_CaptureCallback+0x28c>)
			     TIM8->CCR3=0;
 80026e2:	2200      	movs	r2, #0
 80026e4:	63e2      	str	r2, [r4, #60]	; 0x3c
			     TIM4->CCR3=0;
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
			     TIM4->CCR4=87; // 87 right reverse
 80026e8:	2257      	movs	r2, #87	; 0x57
			   TIM4->CCR4=0;
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
 80026ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		  else if(left<70 && right>100){
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0x284>)
 80026f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026f6:	2200      	movs	r2, #0
 80026f8:	4b49      	ldr	r3, [pc, #292]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fe f993 	bl	8000a28 <__aeabi_dcmplt>
 8002702:	b170      	cbz	r0, 8002722 <HAL_TIM_IC_CaptureCallback+0x1be>
 8002704:	2200      	movs	r2, #0
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002708:	e9d6 0100 	ldrd	r0, r1, [r6]
 800270c:	f7fe f9aa 	bl	8000a64 <__aeabi_dcmpgt>
 8002710:	b138      	cbz	r0, 8002722 <HAL_TIM_IC_CaptureCallback+0x1be>
		    TIM8->CCR4=100;
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002714:	2264      	movs	r2, #100	; 0x64
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
		    TIM8->CCR3=0;
 8002718:	63df      	str	r7, [r3, #60]	; 0x3c
		    TIM4->CCR3=0;
 800271a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800271e:	63df      	str	r7, [r3, #60]	; 0x3c
 8002720:	e7e3      	b.n	80026ea <HAL_TIM_IC_CaptureCallback+0x186>
		  else if(right<70 && left>100){
 8002722:	e9d6 6700 	ldrd	r6, r7, [r6]
 8002726:	2200      	movs	r2, #0
 8002728:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800272a:	4630      	mov	r0, r6
 800272c:	4639      	mov	r1, r7
 800272e:	f7fe f97b 	bl	8000a28 <__aeabi_dcmplt>
 8002732:	b160      	cbz	r0, 800274e <HAL_TIM_IC_CaptureCallback+0x1ea>
 8002734:	2200      	movs	r2, #0
 8002736:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f7fe f992 	bl	8000a64 <__aeabi_dcmpgt>
 8002740:	b128      	cbz	r0, 800274e <HAL_TIM_IC_CaptureCallback+0x1ea>
			TIM8->CCR4=0;
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002744:	2200      	movs	r2, #0
			TIM8->CCR3=100;
 8002746:	2164      	movs	r1, #100	; 0x64
			TIM8->CCR4=0;
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
			TIM8->CCR3=100;
 800274a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800274c:	e75c      	b.n	8002608 <HAL_TIM_IC_CaptureCallback+0xa4>
			  if((right + left) < 100){
 800274e:	4632      	mov	r2, r6
 8002750:	463b      	mov	r3, r7
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd fd43 	bl	80001e0 <__adddf3>
 800275a:	2200      	movs	r2, #0
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800275e:	f7fe f963 	bl	8000a28 <__aeabi_dcmplt>
 8002762:	b308      	cbz	r0, 80027a8 <HAL_TIM_IC_CaptureCallback+0x244>
				  if(right<35){ // 30
 8002764:	2200      	movs	r2, #0
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8002768:	4630      	mov	r0, r6
 800276a:	4639      	mov	r1, r7
 800276c:	f7fe f95c 	bl	8000a28 <__aeabi_dcmplt>
 8002770:	b148      	cbz	r0, 8002786 <HAL_TIM_IC_CaptureCallback+0x222>
					   TIM8->CCR4=71; //left
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002774:	2247      	movs	r2, #71	; 0x47
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
					   TIM8->CCR3=0;
 8002778:	2200      	movs	r2, #0
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
					   TIM4->CCR3=72;//right
 800277c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002780:	2148      	movs	r1, #72	; 0x48
 8002782:	63d9      	str	r1, [r3, #60]	; 0x3c
					   TIM4->CCR4=0;
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
				  if(left<65){ // 50
 8002786:	2200      	movs	r2, #0
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fe f94b 	bl	8000a28 <__aeabi_dcmplt>
 8002792:	b148      	cbz	r0, 80027a8 <HAL_TIM_IC_CaptureCallback+0x244>
					   TIM8->CCR4=72; // 75
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002796:	2248      	movs	r2, #72	; 0x48
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
					   TIM8->CCR3=0;
 800279a:	2200      	movs	r2, #0
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
					   TIM4->CCR3=71;
 800279e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80027a2:	2147      	movs	r1, #71	; 0x47
 80027a4:	63d9      	str	r1, [r3, #60]	; 0x3c
					   TIM4->CCR4=0;
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
			   TIM8->CCR4=73; // 78
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0x280>)
 80027aa:	2249      	movs	r2, #73	; 0x49
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
			   TIM8->CCR3=0;
 80027ae:	2200      	movs	r2, #0
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c
			   TIM4->CCR3=75; //80
 80027b2:	214b      	movs	r1, #75	; 0x4b
 80027b4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80027b8:	e727      	b.n	800260a <HAL_TIM_IC_CaptureCallback+0xa6>
 80027ba:	bf00      	nop
 80027bc:	200001bc 	.word	0x200001bc
 80027c0:	40000400 	.word	0x40000400
 80027c4:	20000168 	.word	0x20000168
 80027c8:	20000114 	.word	0x20000114
 80027cc:	40014000 	.word	0x40014000
 80027d0:	20000108 	.word	0x20000108
 80027d4:	48000400 	.word	0x48000400
 80027d8:	200000c0 	.word	0x200000c0
 80027dc:	40490000 	.word	0x40490000
 80027e0:	404e0000 	.word	0x404e0000
 80027e4:	40013400 	.word	0x40013400
 80027e8:	20000158 	.word	0x20000158
 80027ec:	403e0000 	.word	0x403e0000
 80027f0:	40000800 	.word	0x40000800
 80027f4:	20000100 	.word	0x20000100
 80027f8:	404d0000 	.word	0x404d0000
 80027fc:	20000030 	.word	0x20000030
 8002800:	40590000 	.word	0x40590000
 8002804:	20000110 	.word	0x20000110
 8002808:	2000026c 	.word	0x2000026c
 800280c:	20000160 	.word	0x20000160
 8002810:	200001b8 	.word	0x200001b8
 8002814:	20000078 	.word	0x20000078
 8002818:	200001b0 	.word	0x200001b0
 800281c:	2000007c 	.word	0x2000007c
 8002820:	40518000 	.word	0x40518000
 8002824:	40418000 	.word	0x40418000
 8002828:	40504000 	.word	0x40504000

0800282c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800282c:	b510      	push	{r4, lr}
 800282e:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002830:	2228      	movs	r2, #40	; 0x28
 8002832:	2100      	movs	r1, #0
 8002834:	a806      	add	r0, sp, #24
 8002836:	f000 fc1b 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283a:	2214      	movs	r2, #20
 800283c:	2100      	movs	r1, #0
 800283e:	a801      	add	r0, sp, #4
 8002840:	f000 fc16 	bl	8003070 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	2258      	movs	r2, #88	; 0x58
 8002846:	2100      	movs	r1, #0
 8002848:	a810      	add	r0, sp, #64	; 0x40
 800284a:	f000 fc11 	bl	8003070 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800284e:	2302      	movs	r3, #2
 8002850:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002852:	2301      	movs	r3, #1
 8002854:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002856:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002858:	2310      	movs	r3, #16
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800285a:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800285c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	f7fe fabf 	bl	8000de0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002862:	230f      	movs	r3, #15
 8002864:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002866:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002868:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800286c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800286e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002870:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002872:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002874:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002876:	f7fe fd61 	bl	800133c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <SystemClock_Config+0x68>)
 800287c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002880:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002882:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8002884:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002886:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002888:	941e      	str	r4, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800288a:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f7fe fe30 	bl	80014f0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002890:	b026      	add	sp, #152	; 0x98
 8002892:	bd10      	pop	{r4, pc}
 8002894:	00703002 	.word	0x00703002

08002898 <main>:
  {
 8002898:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800289c:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 800289e:	f7fe f937 	bl	8000b10 <HAL_Init>
  SystemClock_Config();
 80028a2:	f7ff ffc3 	bl	800282c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	2214      	movs	r2, #20
 80028a8:	2100      	movs	r1, #0
 80028aa:	a80f      	add	r0, sp, #60	; 0x3c
 80028ac:	f000 fbe0 	bl	8003070 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b0:	4bb5      	ldr	r3, [pc, #724]	; (8002b88 <main+0x2f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80028b2:	48b6      	ldr	r0, [pc, #728]	; (8002b8c <main+0x2f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b4:	695a      	ldr	r2, [r3, #20]
  htim1.Instance = TIM1;
 80028b6:	4db6      	ldr	r5, [pc, #728]	; (8002b90 <main+0x2f8>)
  htim15.Instance = TIM15;
 80028b8:	4eb6      	ldr	r6, [pc, #728]	; (8002b94 <main+0x2fc>)
  htim2.Instance = TIM2;
 80028ba:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8002bb8 <main+0x320>
  htim3.Instance = TIM3;
 80028be:	4fb6      	ldr	r7, [pc, #728]	; (8002b98 <main+0x300>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80028cc:	9202      	str	r2, [sp, #8]
 80028ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028de:	9203      	str	r2, [sp, #12]
 80028e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80028f8:	f7fe fa6c 	bl	8000dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2120      	movs	r1, #32
 8002900:	48a2      	ldr	r0, [pc, #648]	; (8002b8c <main+0x2f4>)

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8002904:	f7fe fa66 	bl	8000dd4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800290c:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	a90f      	add	r1, sp, #60	; 0x3c
 8002910:	489e      	ldr	r0, [pc, #632]	; (8002b8c <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002912:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291c:	f7fe f984 	bl	8000c28 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002920:	221c      	movs	r2, #28
 8002922:	4621      	mov	r1, r4
 8002924:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002926:	9405      	str	r4, [sp, #20]
 8002928:	9406      	str	r4, [sp, #24]
 800292a:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800292c:	f000 fba0 	bl	8003070 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002930:	222c      	movs	r2, #44	; 0x2c
 8002932:	4621      	mov	r1, r4
 8002934:	a80f      	add	r0, sp, #60	; 0x3c
 8002936:	f000 fb9b 	bl	8003070 <memset>
  htim1.Init.Prescaler = 7;
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <main+0x304>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 7;
 800293e:	f04f 0907 	mov.w	r9, #7
 8002942:	e885 0208 	stmia.w	r5, {r3, r9}
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002946:	4628      	mov	r0, r5
  htim1.Init.Period = 60000;
 8002948:	f64e 2360 	movw	r3, #60000	; 0xea60
 800294c:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294e:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002950:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002954:	f7ff f82e 	bl	80019b4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002958:	a905      	add	r1, sp, #20
 800295a:	4628      	mov	r0, r5
  sConfigOC.Pulse = 10;
 800295c:	f04f 0b0a 	mov.w	fp, #10
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002960:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002962:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002966:	f7ff fb97 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800296a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800296c:	4622      	mov	r2, r4
 800296e:	a908      	add	r1, sp, #32
 8002970:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002972:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 10;
 8002974:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002978:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800297a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297c:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800297e:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002980:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002982:	f7ff fb01 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002986:	2204      	movs	r2, #4
 8002988:	a908      	add	r1, sp, #32
 800298a:	4628      	mov	r0, r5
 800298c:	f7ff fafc 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002994:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002996:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002998:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800299a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299e:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029a0:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029a2:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029a4:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80029a6:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029a8:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029aa:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ac:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029ae:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029b0:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029b2:	f7ff fb9b 	bl	80020ec <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 fa2c 	bl	8002e14 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029bc:	2210      	movs	r2, #16
 80029be:	4621      	mov	r1, r4
 80029c0:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c2:	9408      	str	r4, [sp, #32]
 80029c4:	9409      	str	r4, [sp, #36]	; 0x24
 80029c6:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029c8:	f000 fb52 	bl	8003070 <memset>
  htim15.Instance = TIM15;
 80029cc:	4b74      	ldr	r3, [pc, #464]	; (8002ba0 <main+0x308>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	60b4      	str	r4, [r6, #8]
  htim15.Init.Prescaler = 7;
 80029d0:	e886 0208 	stmia.w	r6, {r3, r9}
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80029d4:	4630      	mov	r0, r6
  htim15.Init.Period = 0xffff;
 80029d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029da:	60f3      	str	r3, [r6, #12]
 80029dc:	9301      	str	r3, [sp, #4]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	6134      	str	r4, [r6, #16]
  htim15.Init.RepetitionCounter = 0;
 80029e0:	6174      	str	r4, [r6, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80029e4:	f7ff f800 	bl	80019e8 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029e8:	a908      	add	r1, sp, #32
 80029ea:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ec:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ee:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029f0:	f7ff fb52 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029f4:	a90f      	add	r1, sp, #60	; 0x3c
 80029f6:	2204      	movs	r2, #4
 80029f8:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80029fa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029fe:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a02:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 8002a04:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a06:	f7ff f965 	bl	8001cd4 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8002a0a:	4866      	ldr	r0, [pc, #408]	; (8002ba4 <main+0x30c>)
  huart2.Init.BaudRate = 115200;
 8002a0c:	4a66      	ldr	r2, [pc, #408]	; (8002ba8 <main+0x310>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002a10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a14:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a1c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a1e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a20:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a22:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a24:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a26:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a28:	f7ff fd69 	bl	80024fe <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	2210      	movs	r2, #16
 8002a30:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a32:	9408      	str	r4, [sp, #32]
 8002a34:	9409      	str	r4, [sp, #36]	; 0x24
 8002a36:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a38:	f000 fb1a 	bl	8003070 <memset>
  htim2.Init.Period = 0xffff;
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	f8c8 300c 	str.w	r3, [r8, #12]
  htim2.Instance = TIM2;
 8002a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002a46:	4640      	mov	r0, r8
  htim2.Init.Prescaler = 7;
 8002a48:	e888 0204 	stmia.w	r8, {r2, r9}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4c:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a50:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002a58:	f7fe ffc6 	bl	80019e8 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a5c:	a908      	add	r1, sp, #32
 8002a5e:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a62:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a64:	f7ff fb18 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a68:	4622      	mov	r2, r4
 8002a6a:	a90f      	add	r1, sp, #60	; 0x3c
 8002a6c:	4640      	mov	r0, r8
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002a6e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a72:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a76:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 8002a78:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a7a:	f7ff f92b 	bl	8001cd4 <HAL_TIM_IC_ConfigChannel>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a7e:	4621      	mov	r1, r4
 8002a80:	2210      	movs	r2, #16
 8002a82:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	9408      	str	r4, [sp, #32]
 8002a86:	9409      	str	r4, [sp, #36]	; 0x24
 8002a88:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a8a:	f000 faf1 	bl	8003070 <memset>
  htim3.Instance = TIM3;
 8002a8e:	4a47      	ldr	r2, [pc, #284]	; (8002bac <main+0x314>)
  htim3.Init.Period = 0xffff;
 8002a90:	9b01      	ldr	r3, [sp, #4]
 8002a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a94:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 7;
 8002a96:	e887 0204 	stmia.w	r7, {r2, r9}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9a:	60bc      	str	r4, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9c:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9e:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002aa0:	f7fe ffa2 	bl	80019e8 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa4:	a908      	add	r1, sp, #32
 8002aa6:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa8:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aaa:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aac:	f7ff faf4 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	a90f      	add	r1, sp, #60	; 0x3c
 8002ab4:	4638      	mov	r0, r7
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ab6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002aba:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002abe:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 8002ac0:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ac2:	f7ff f907 	bl	8001cd4 <HAL_TIM_IC_ConfigChannel>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac6:	221c      	movs	r2, #28
 8002ac8:	4621      	mov	r1, r4
 8002aca:	a80f      	add	r0, sp, #60	; 0x3c
  htim4.Instance = TIM4;
 8002acc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8002bbc <main+0x324>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	9408      	str	r4, [sp, #32]
 8002ad2:	9409      	str	r4, [sp, #36]	; 0x24
 8002ad4:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ad6:	f000 facb 	bl	8003070 <memset>
  htim4.Instance = TIM4;
 8002ada:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <main+0x318>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	f8cb 4008 	str.w	r4, [fp, #8]
  htim4.Init.Prescaler = 7;
 8002ae0:	e88b 0208 	stmia.w	fp, {r3, r9}
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ae4:	4658      	mov	r0, fp
  htim4.Init.Period = 100;
 8002ae6:	2364      	movs	r3, #100	; 0x64
 8002ae8:	f8cb 300c 	str.w	r3, [fp, #12]
 8002aec:	9301      	str	r3, [sp, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	f8cb 4010 	str.w	r4, [fp, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002af6:	f7fe ff5d 	bl	80019b4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002afa:	a908      	add	r1, sp, #32
 8002afc:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afe:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b02:	f7ff fac9 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b06:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b08:	2208      	movs	r2, #8
 8002b0a:	a90f      	add	r1, sp, #60	; 0x3c
 8002b0c:	4658      	mov	r0, fp
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b0e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 8002b10:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b12:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b14:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b16:	f7ff fa37 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	a90f      	add	r1, sp, #60	; 0x3c
 8002b1e:	4658      	mov	r0, fp
 8002b20:	f7ff fa32 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8002b24:	4658      	mov	r0, fp
 8002b26:	f000 f975 	bl	8002e14 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2a:	221c      	movs	r2, #28
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	a808      	add	r0, sp, #32
  htim8.Instance = TIM8;
 8002b30:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002bc0 <main+0x328>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	9405      	str	r4, [sp, #20]
 8002b36:	9406      	str	r4, [sp, #24]
 8002b38:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3a:	f000 fa99 	bl	8003070 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b3e:	4621      	mov	r1, r4
 8002b40:	222c      	movs	r2, #44	; 0x2c
 8002b42:	a80f      	add	r0, sp, #60	; 0x3c
 8002b44:	f000 fa94 	bl	8003070 <memset>
  htim8.Instance = TIM8;
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <main+0x31c>)
  htim8.Init.Period = 100;
 8002b4a:	9b01      	ldr	r3, [sp, #4]
 8002b4c:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b50:	4650      	mov	r0, sl
  htim8.Init.Prescaler = 7;
 8002b52:	e88a 0204 	stmia.w	sl, {r2, r9}
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b56:	f8ca 4008 	str.w	r4, [sl, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	f8ca 4010 	str.w	r4, [sl, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b5e:	f8ca 4014 	str.w	r4, [sl, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b62:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b66:	f7fe ff25 	bl	80019b4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b6a:	a905      	add	r1, sp, #20
 8002b6c:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6e:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b70:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b72:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b74:	f7ff fa90 	bl	8002098 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b78:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	a908      	add	r1, sp, #32
 8002b7e:	4650      	mov	r0, sl
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b80:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8002b82:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b84:	940a      	str	r4, [sp, #40]	; 0x28
 8002b86:	e01d      	b.n	8002bc4 <main+0x32c>
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	20000170 	.word	0x20000170
 8002b94:	200000c0 	.word	0x200000c0
 8002b98:	20000114 	.word	0x20000114
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	200001fc 	.word	0x200001fc
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	200001bc 	.word	0x200001bc
 8002bbc:	20000080 	.word	0x20000080
 8002bc0:	20000038 	.word	0x20000038
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc4:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bc8:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bca:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bcc:	f7ff f9dc 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bd0:	220c      	movs	r2, #12
 8002bd2:	a908      	add	r1, sp, #32
 8002bd4:	4650      	mov	r0, sl
 8002bd6:	f7ff f9d7 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bde:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002be0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002be2:	4650      	mov	r0, sl
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be8:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bea:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bec:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bee:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf0:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bf2:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bf4:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002bf6:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002bf8:	9418      	str	r4, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bfa:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bfc:	f7ff fa76 	bl	80020ec <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
 8002c00:	4650      	mov	r0, sl
 8002c02:	f000 f907 	bl	8002e14 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002c06:	4621      	mov	r1, r4
 8002c08:	4628      	mov	r0, r5
 8002c0a:	f7ff f8f7 	bl	8001dfc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4640      	mov	r0, r8
 8002c12:	f7ff f91d 	bl	8001e50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 8002c16:	2104      	movs	r1, #4
 8002c18:	4638      	mov	r0, r7
 8002c1a:	f7ff f919 	bl	8001e50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15,TIM_CHANNEL_2);
 8002c1e:	2104      	movs	r1, #4
 8002c20:	4630      	mov	r0, r6
 8002c22:	f7ff f915 	bl	8001e50 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8002c26:	210c      	movs	r1, #12
 8002c28:	4650      	mov	r0, sl
 8002c2a:	f7ff f8e7 	bl	8001dfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8002c2e:	2108      	movs	r1, #8
 8002c30:	4650      	mov	r0, sl
 8002c32:	f7ff f8e3 	bl	8001dfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002c36:	2108      	movs	r1, #8
 8002c38:	4658      	mov	r0, fp
 8002c3a:	f7ff f8df 	bl	8001dfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002c3e:	210c      	movs	r1, #12
 8002c40:	4658      	mov	r0, fp
 8002c42:	f7ff f8db 	bl	8001dfc <HAL_TIM_PWM_Start>
 8002c46:	e7fe      	b.n	8002c46 <main+0x3ae>

08002c48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <HAL_MspInit+0x34>)
{
 8002c4a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	619a      	str	r2, [r3, #24]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	f002 0201 	and.w	r2, r2, #1
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c64:	61da      	str	r2, [r3, #28]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c6e:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c72:	f7fd ff71 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c76:	b003      	add	sp, #12
 8002c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_pwm->Instance==TIM1)
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_TIM_PWM_MspInit+0x6c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d114      	bne.n	8002cb4 <HAL_TIM_PWM_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x70>)
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c92:	619a      	str	r2, [r3, #24]
 8002c94:	699b      	ldr	r3, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c9e:	2018      	movs	r0, #24
 8002ca0:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ca4:	f7fd ff6a 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ca8:	2018      	movs	r0, #24
 8002caa:	f7fd ff9b 	bl	8000be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002cae:	b005      	add	sp, #20
 8002cb0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_pwm->Instance==TIM4)
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <HAL_TIM_PWM_MspInit+0x74>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x70>)
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	f042 0204 	orr.w	r2, r2, #4
 8002cc2:	61da      	str	r2, [r3, #28]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	9b02      	ldr	r3, [sp, #8]
 8002cce:	e7ee      	b.n	8002cae <HAL_TIM_PWM_MspInit+0x2e>
  else if(htim_pwm->Instance==TIM8)
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_TIM_PWM_MspInit+0x78>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d1eb      	bne.n	8002cae <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x70>)
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce6:	9303      	str	r3, [sp, #12]
 8002ce8:	9b03      	ldr	r3, [sp, #12]
}
 8002cea:	e7e0      	b.n	8002cae <HAL_TIM_PWM_MspInit+0x2e>
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40013400 	.word	0x40013400

08002cfc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4604      	mov	r4, r0
 8002d00:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d02:	2214      	movs	r2, #20
 8002d04:	2100      	movs	r1, #0
 8002d06:	a807      	add	r0, sp, #28
 8002d08:	f000 f9b2 	bl	8003070 <memset>
  if(htim_ic->Instance==TIM2)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d127      	bne.n	8002d64 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d14:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	a907      	add	r1, sp, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	61da      	str	r2, [r3, #28]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	f002 0201 	and.w	r2, r2, #1
 8002d28:	9201      	str	r2, [sp, #4]
 8002d2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d42:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d4a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f7fd ff6c 	bl	8000c28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	201c      	movs	r0, #28
 8002d54:	4611      	mov	r1, r2
 8002d56:	f7fd ff11 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d5a:	201c      	movs	r0, #28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d5c:	f7fd ff42 	bl	8000be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d60:	b00c      	add	sp, #48	; 0x30
 8002d62:	bd10      	pop	{r4, pc}
  else if(htim_ic->Instance==TIM3)
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_TIM_IC_MspInit+0x108>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d123      	bne.n	8002db2 <HAL_TIM_IC_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_TIM_IC_MspInit+0x10c>)
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	f042 0202 	orr.w	r2, r2, #2
 8002d72:	61da      	str	r2, [r3, #28]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	f002 0202 	and.w	r2, r2, #2
 8002d7a:	9203      	str	r2, [sp, #12]
 8002d7c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	9304      	str	r3, [sp, #16]
 8002d8e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d90:	2310      	movs	r3, #16
 8002d92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d9e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f7fd ff42 	bl	8000c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	201d      	movs	r0, #29
 8002da8:	4611      	mov	r1, r2
 8002daa:	f7fd fee7 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dae:	201d      	movs	r0, #29
 8002db0:	e7d4      	b.n	8002d5c <HAL_TIM_IC_MspInit+0x60>
  else if(htim_ic->Instance==TIM15)
 8002db2:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_TIM_IC_MspInit+0x110>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d1d3      	bne.n	8002d60 <HAL_TIM_IC_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_TIM_IC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	4815      	ldr	r0, [pc, #84]	; (8002e10 <HAL_TIM_IC_MspInit+0x114>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dc2:	619a      	str	r2, [r3, #24]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002dca:	9205      	str	r2, [sp, #20]
 8002dcc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	9306      	str	r3, [sp, #24]
 8002dde:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002dec:	2301      	movs	r3, #1
 8002dee:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f7fd ff1a 	bl	8000c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2018      	movs	r0, #24
 8002df8:	4611      	mov	r1, r2
 8002dfa:	f7fd febf 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002dfe:	2018      	movs	r0, #24
 8002e00:	e7ac      	b.n	8002d5c <HAL_TIM_IC_MspInit+0x60>
 8002e02:	bf00      	nop
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	48000400 	.word	0x48000400

08002e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4604      	mov	r4, r0
 8002e18:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	2214      	movs	r2, #20
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	a803      	add	r0, sp, #12
 8002e20:	f000 f926 	bl	8003070 <memset>
  if(htim->Instance==TIM1)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_TIM_MspPostInit+0x98>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d111      	bne.n	8002e50 <HAL_TIM_MspPostInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_TIM_MspPostInit+0x9c>)
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e34:	615a      	str	r2, [r3, #20]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e40:	2303      	movs	r3, #3
 8002e42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	9304      	str	r3, [sp, #16]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002e48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	a903      	add	r1, sp, #12
 8002e4c:	4819      	ldr	r0, [pc, #100]	; (8002eb4 <HAL_TIM_MspPostInit+0xa0>)
 8002e4e:	e014      	b.n	8002e7a <HAL_TIM_MspPostInit+0x66>
  else if(htim->Instance==TIM4)
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_TIM_MspPostInit+0xa4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d115      	bne.n	8002e82 <HAL_TIM_MspPostInit+0x6e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_TIM_MspPostInit+0x9c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	4818      	ldr	r0, [pc, #96]	; (8002ebc <HAL_TIM_MspPostInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7a:	f7fd fed5 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e7e:	b008      	add	sp, #32
 8002e80:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM8)
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_TIM_MspPostInit+0xac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d1fa      	bne.n	8002e7e <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_TIM_MspPostInit+0x9c>)
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e90:	615a      	str	r2, [r3, #20]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e7ce      	b.n	8002e48 <HAL_TIM_MspPostInit+0x34>
 8002eaa:	bf00      	nop
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	48000800 	.word	0x48000800
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	40013400 	.word	0x40013400

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	2214      	movs	r2, #20
 8002ecc:	2100      	movs	r1, #0
 8002ece:	a803      	add	r0, sp, #12
 8002ed0:	f000 f8ce 	bl	8003070 <memset>
  if(huart->Instance==USART2)
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_UART_MspInit+0x5c>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d11e      	bne.n	8002f1a <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002edc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ef0:	9201      	str	r2, [sp, #4]
 8002ef2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f06:	230c      	movs	r3, #12
 8002f08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f12:	2307      	movs	r3, #7
 8002f14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f7fd fe87 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f1a:	b008      	add	sp, #32
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	bf00      	nop
 8002f20:	40004400 	.word	0x40004400

08002f24 <NMI_Handler>:
 8002f24:	4770      	bx	lr

08002f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f26:	e7fe      	b.n	8002f26 <HardFault_Handler>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	e7fe      	b.n	8002f28 <MemManage_Handler>

08002f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	e7fe      	b.n	8002f2c <UsageFault_Handler>

08002f2e <SVC_Handler>:
 8002f2e:	4770      	bx	lr

08002f30 <DebugMon_Handler>:
 8002f30:	4770      	bx	lr

08002f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f32:	4770      	bx	lr

08002f34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f34:	f7fd bdfe 	b.w	8000b34 <HAL_IncTick>

08002f38 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002f38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f3a:	4804      	ldr	r0, [pc, #16]	; (8002f4c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002f3c:	f7fe fc20 	bl	8001780 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002f40:	4803      	ldr	r0, [pc, #12]	; (8002f50 <TIM1_BRK_TIM15_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim15);
 8002f46:	f7fe bc1b 	b.w	8001780 <HAL_TIM_IRQHandler>
 8002f4a:	bf00      	nop
 8002f4c:	20000170 	.word	0x20000170
 8002f50:	200000c0 	.word	0x200000c0

08002f54 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f54:	4801      	ldr	r0, [pc, #4]	; (8002f5c <TIM2_IRQHandler+0x8>)
 8002f56:	f7fe bc13 	b.w	8001780 <HAL_TIM_IRQHandler>
 8002f5a:	bf00      	nop
 8002f5c:	200001bc 	.word	0x200001bc

08002f60 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f60:	4801      	ldr	r0, [pc, #4]	; (8002f68 <TIM3_IRQHandler+0x8>)
 8002f62:	f7fe bc0d 	b.w	8001780 <HAL_TIM_IRQHandler>
 8002f66:	bf00      	nop
 8002f68:	20000114 	.word	0x20000114

08002f6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4915      	ldr	r1, [pc, #84]	; (8002fc4 <SystemInit+0x58>)
 8002f6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <SystemInit+0x5c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002f84:	6858      	ldr	r0, [r3, #4]
 8002f86:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <SystemInit+0x60>)
 8002f88:	4002      	ands	r2, r0
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f96:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	f022 020f 	bic.w	r2, r2, #15
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002fb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <SystemInit+0x64>)
 8002fb4:	4002      	ands	r2, r0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fc0:	608b      	str	r3, [r1, #8]
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	f87fc00c 	.word	0xf87fc00c
 8002fd0:	ff00fccc 	.word	0xff00fccc

08002fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800300c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fda:	e003      	b.n	8002fe4 <LoopCopyDataInit>

08002fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fe2:	3104      	adds	r1, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fec:	d3f6      	bcc.n	8002fdc <CopyDataInit>
	ldr	r2, =_sbss
 8002fee:	4a0b      	ldr	r2, [pc, #44]	; (800301c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ff0:	e002      	b.n	8002ff8 <LoopFillZerobss>

08002ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ff4:	f842 3b04 	str.w	r3, [r2], #4

08002ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <LoopForever+0x16>)
	cmp	r2, r3
 8002ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ffc:	d3f9      	bcc.n	8002ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ffe:	f7ff ffb5 	bl	8002f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003002:	f000 f811 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003006:	f7ff fc47 	bl	8002898 <main>

0800300a <LoopForever>:

LoopForever:
    b LoopForever
 800300a:	e7fe      	b.n	800300a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800300c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003010:	080030dc 	.word	0x080030dc
	ldr	r0, =_sdata
 8003014:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003018:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800301c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003020:	20000270 	.word	0x20000270

08003024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_2_IRQHandler>
	...

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4e0d      	ldr	r6, [pc, #52]	; (8003060 <__libc_init_array+0x38>)
 800302c:	4c0d      	ldr	r4, [pc, #52]	; (8003064 <__libc_init_array+0x3c>)
 800302e:	1ba4      	subs	r4, r4, r6
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	2500      	movs	r5, #0
 8003034:	42a5      	cmp	r5, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	4e0b      	ldr	r6, [pc, #44]	; (8003068 <__libc_init_array+0x40>)
 800303a:	4c0c      	ldr	r4, [pc, #48]	; (800306c <__libc_init_array+0x44>)
 800303c:	f000 f820 	bl	8003080 <_init>
 8003040:	1ba4      	subs	r4, r4, r6
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	2500      	movs	r5, #0
 8003046:	42a5      	cmp	r5, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003050:	4798      	blx	r3
 8003052:	3501      	adds	r5, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800305a:	4798      	blx	r3
 800305c:	3501      	adds	r5, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	080030d4 	.word	0x080030d4
 8003064:	080030d4 	.word	0x080030d4
 8003068:	080030d4 	.word	0x080030d4
 800306c:	080030d8 	.word	0x080030d8

08003070 <memset>:
 8003070:	4402      	add	r2, r0
 8003072:	4603      	mov	r3, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <_init>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr

0800308c <_fini>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr
